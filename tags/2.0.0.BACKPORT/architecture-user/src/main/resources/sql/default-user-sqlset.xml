<?xml version="1.0" encoding="UTF-8"?>
<sqlset>
    <name>ARCHITECTURE_SECURITY</name>
    <version>2.0</version>
    <description>Queries for SECURITY</description>
    <version></version>
    	 
    <!--  COMPANY -->	 
	<sql-query name="CREATE_COMPANY" description="COMPANY 생성"><![CDATA[    
    	INSERT INTO V2_COMPANY (
   			COMPANY_ID, 
   			NAME, 
   			DISPLAY_NAME,
   			DOMAIN_NAME,
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		) VALUES ( ?, ?, ?, ?, ?, ?, ?)
    ]]></sql-query>

	<sql-query name="SELECT_All_COMPANY_DOMAIN_AND_ID" description="SELECT_All_COMPANY_DOMAIN_AND_ID 조회"><![CDATA[    
        SELECT
   			COMPANY_ID, 
   			DOMAIN_NAME
  		FROM V2_COMPANY
    ]]></sql-query>
    
	<sql-query name="SELECT_COMPANY_BY_ID" description="COMPANY 조회"><![CDATA[    
        SELECT
   			COMPANY_ID, 
   			NAME,
   			DISPLAY_NAME, 
   			DOMAIN_NAME,
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		FROM V2_COMPANY WHERE COMPANY_ID = ?
    ]]></sql-query>


	<sql-query name="UPDATE_COMPANY" description="COMPANY  수정"><![CDATA[        
        UPDATE V2_COMPANY
            SET NAME = ?, DISPLAY_NAME = ?, DOMAIN_NAME = ?, DESCRIPTION = ? , MODIFIED_DATE = ?
        WHERE COMPANY_ID = ?
    ]]></sql-query>

<sql-query name="SELECT_COMPANY_BY_DOMAIN_NAME" description="COMPANY 조회">
		<dynamic><![CDATA[
        SELECT
   			COMPANY_ID, 
   			NAME, 
   			DISPLAY_NAME,
   			DOMAIN_NAME,
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		FROM V2_COMPANY
  		WHERE DOMAIN_NAME LIKE '%'|| ? ||'%'
    ]]></dynamic>
	</sql-query>
		
	<sql-query name="SELECT_COMPANY_BY_NAME" description="COMPANY 조회">
		<dynamic><![CDATA[
        SELECT
   			COMPANY_ID, 
   			NAME, 
   			DISPLAY_NAME,
   			DOMAIN_NAME,
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		FROM V2_COMPANY
  		WHERE <#if additional_parameter > LOWER(NAME) = ? <#else> NAME = ? </#if>
    ]]></dynamic>
	</sql-query>
		
	<sql-query name="COUNT_ALL_COMPANY" description="전체 COMPANY 수를 조회"><![CDATA[
		SELECT COUNT(COMPANY_ID)
		FROM V2_COMPANY
    ]]></sql-query>
    
    <sql-query name="SELECT_ALL_COMPANY_IDS" description="모든 COMPANY 아이디를 조회"><![CDATA[
		SELECT COMPANY_ID FROM V2_COMPANY ORDER BY COMPANY_ID
    ]]></sql-query>
    
	<sql-query name="DELETE_COMPANY" description="COMPANY 삭제"><![CDATA[
		DELETE FROM V2_COMPANY WHERE COMPANY_ID = ?
    ]]></sql-query>
	 
	<sql-query name="UPDATE_COMPANY_MODIFIED_DATE" description="COMPANY 수정일 업데이트"><![CDATA[        
        UPDATE V2_COMPANY
        SET MODIFIED_DATE = ?
        WHERE COMPANY_ID = ?
    ]]></sql-query>
        	     	
	<sql-query name="COUNT_COMPANY_GROUPS" description="COMPANY 그룹 수를 조회"><![CDATA[
		SELECT COUNT(COMPANY_ID)
		FROM V2_GROUP  WHERE COMPANY_ID = ?
    ]]></sql-query>        	     	

	<sql-query name="SELECT_COMPANY_GROUP_IDS" description="COMPANY 그룹 ID를 조회"><![CDATA[
		SELECT GROUP_ID
		FROM V2_GROUP  WHERE COMPANY_ID = ?
		ORDER BY GROUP_ID
    ]]></sql-query>    
    
            	     	 
	 <!--  USER  -->
	<sql-query name="SELECT_ALL_USER" description="전체 사용자를 조회"><![CDATA[
		SELECT 
			COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER
    ]]></sql-query>

	<sql-query name="SELECT_ALL_VISIBLE_USER" description="전체 사용자를 조회"><![CDATA[
		SELECT 
			COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE VISIBLE = 1
    ]]></sql-query>

	<sql-query name="SELECT_ALL_ENABLED_USER" description="전체 로컬 사용자를 조회"><![CDATA[
		SELECT 
			COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE VISIBLE = 1 AND USER_ENABLED =1 AND IS_EXTERNAL = 0
    ]]></sql-query>

	<sql-query name="SELECT_USER_BY_ID" description="USER_ID 에 해당하는 사용자를 조회"><![CDATA[
		SELECT 
		    COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE USER_ID = ?
    ]]></sql-query>

	<sql-query name="SELECT_USER_BY_EMAIL" description="메일 주소에 해당하는 사용자를 조회"><![CDATA[
		SELECT 
		    COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE VISIBLE = 1 AND EMAIL LIKE ?
    ]]></sql-query>

<sql-query name="SELECT_USERS_BY_EMAIL_OR_NAME" description="메일 주소에 또는 이름에 해당하는 모든 사용자를 조회"><![CDATA[
		SELECT 
		    COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE VISIBLE = 1 AND ( EMAIL LIKE ? OR NAME LIKE ? )
    ]]></sql-query>
    
	<sql-query name="SELECT_USER_BY_USERNAME" description="USERNAME에 해당하는 사용자를 조회."><![CDATA[
		SELECT 
			COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE USERNAME = ?
    ]]></sql-query>

	<sql-query name="SELECT_USER_BY_USERNAME_NOCASE"
		description="USERNAME에 해당하는 사용자를 조회. USERNAME은 모두 소문자로 비교한다."><![CDATA[
		SELECT 
			COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE LOWER(USERNAME) = ?
    ]]></sql-query>

	<sql-query name="UPDATE_USER" description="사용자 업데이트"><![CDATA[ 
       UPDATE V2_USER SET	  
	       NAME                = ?,
	       FIRST_NAME          = ?,
	       LAST_NAME           = ?,       
	       NAME_VISIBLE        = ?,
	       EMAIL               = ?,
	       EMAIL_VISIBLE       = ?,
	       MODIFIED_DATE       = ?,
	       LAST_LOGINED_IN     = ?,
	       LAST_PROFILE_UPDATE = ?,
	       USERNAME            = ?,
	       IS_EXTERNAL         = ?,
	       FEDERATED           = ?,
	       STATUS              = ?,
	       PASSWORD_HASH = ?
       WHERE USER_ID       = ?
    ]]></sql-query>

	<sql-query name="CREATE_USER" description="사용자 생성"><![CDATA[   
        INSERT INTO V2_USER (
        	COMPANY_ID,
   			USER_ID, 
   			USERNAME, 
   			PASSWORD_HASH, 
   			NAME, 
   			NAME_VISIBLE, 
   			FIRST_NAME, 
   			LAST_NAME, 
   			EMAIL, 
   			EMAIL_VISIBLE, 
  			LAST_LOGINED_IN, 
  			LAST_PROFILE_UPDATE, 
  			USER_ENABLED, 
   			VISIBLE, 
   			IS_EXTERNAL, 
   			FEDERATED, 
   			STATUS,
   			CREATION_DATE, 
   			MODIFIED_DATE 
   		) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
     ]]></sql-query>

	<sql-query name="COUNT_USERS_BY_EMAIL_OR_NAME" description="활성화된 내부 사용자 수"><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER 
		WHERE VISIBLE = 1 AND ( EMAIL LIKE ? OR NAME LIKE ? )
    ]]></sql-query>


	<sql-query name="COUNT_ENABLED_USER" description="활성화된 내부 사용자 수"><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER WHERE VISIBLE = 1 AND USER_ENABLED = 1 AND IS_EXTERNAL = 0
    ]]></sql-query>

	<sql-query name="COUNT_VISIBLE_USER" description="활성화 되지 않은  사용자와 외부 사용자를 포함하는 전체 사용자 수 "><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER WHERE VISIBLE = 1
    ]]></sql-query>

	<sql-query name="COUNT_AUTHENTICATED_USER" description="인증된 전체 사용자 수 "><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER WHERE VISIBLE = 1 AND USER_ENABLED = 1 AND IS_EXTERNAL = 0 AND LAST_LOGINED_IN > 0
    ]]></sql-query>

	<sql-query name="COUNT_RECENT_USER" description="최근 등록된 사용자 수 "><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER WHERE VISIBLE = 1 AND USER_ENABLED = 1 AND IS_EXTERNAL = 0 AND CREATION_DATE > ?
    ]]></sql-query>

	<sql-query name="SELECT_USER_ID_BY_STATUS" description="상태에 따른 사용자 아이디 조회 ">
		SELECT USER_ID FROM V2_USER
		<dynamic><![CDATA[        
        <#assign max_idx = additional_parameter?size >
        <#assign idx = 0 >  
        <#if 0 < max_idx >WHERE</#if>      
        <#list additional_parameter as parameter>
        <#assign idx = idx + 1 > 
        STATUS = ${additional_parameter} <#if idx < max_idx >OR</#if>
        </#list>        
    ]]></dynamic>
	</sql-query>


	 
	<sql-query name="COUNT_COMPANY_USERS" description="전체 회사 소속 사용자 수" ><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER WHERE VISIBLE = 1 AND COMPANY_ID= ? 
	 ]]></sql-query>
	 
	 
	 <sql-query name="SELECT_ALL_COMPANY_VISIBLE_USER" description="전체 회사 소속 사용자 " ><![CDATA[
		SELECT 
			COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE VISIBLE = 1 AND COMPANY_ID= ?  
	 ]]></sql-query>

	<sql-query name="SELECT_COMPANY_USERS_BY_EMAIL_OR_NAME" description="메일 또는 이름에 해당하는 회사 소속 사용자 " ><![CDATA[
		SELECT 
		    COMPANY_ID,
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE COMPANY_ID= ? AND VISIBLE = 1 AND ( EMAIL LIKE ? OR NAME LIKE ? )
	 ]]></sql-query>
	 	
	<sql-query name="COUNT_COMPANY_USERS_BY_EMAIL_OR_NAME" description="메일 또는 이름에 해당하는 회사 소속 사용자 수" ><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER 
		WHERE COMPANY_ID= ? AND VISIBLE = 1 AND ( EMAIL LIKE ? OR NAME LIKE ? )	
	 ]]></sql-query>	

	<sql-query name="SELECT_COMPANY_USER_IDS_BY_EMAIL_OR_NAME_WITH_GROUP_FILTER" description="회사 소속 사용자 " ><![CDATA[
	SELECT 
		T1.USER_ID
	FROM V2_USER T1 
	WHERE T1.COMPANY_ID= ?
	AND T1.VISIBLE = 1 
	AND ( T1.EMAIL LIKE ? OR T1.NAME LIKE ? )
		AND NOT EXISTS (
		SELECT T2.USER_ID 
		FROM V2_GROUP_MEMBERS T2       
		WHERE T2.GROUP_ID = ?
		AND T1.USER_ID = T2.USER_ID
	)	
	 ]]></sql-query>
	 <sql-query name="COUNT_COMPANY_USERS_BY_EMAIL_OR_NAME_WITH_GROUP_FILTER" description="회사 소속 사용자 " ><![CDATA[
	SELECT 
		COUNT(T1.USER_ID)
	FROM V2_USER T1 
	WHERE T1.COMPANY_ID= ?
	AND T1.VISIBLE = 1 
	AND ( T1.EMAIL LIKE ? OR T1.NAME LIKE ? )
		AND NOT EXISTS (
		SELECT T2.USER_ID 
		FROM V2_GROUP_MEMBERS T2       
		WHERE T2.GROUP_ID = ?
		AND T1.USER_ID = T2.USER_ID
	)
	 ]]></sql-query>
	
	<!-- GROUP -->
	<sql-query name="CREATE_GROUP" description="그룹 생성"><![CDATA[    
    	INSERT INTO V2_GROUP (
    	   COMPANY_ID,
   			GROUP_ID, 
   			NAME, 
   			DISPLAY_NAME,
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		) VALUES ( ?, ?, ?, ?, ?, ?, ?)
    ]]></sql-query>

	<sql-query name="SELECT_GROUP_BY_ID" description="그룹 조회"><![CDATA[    
        SELECT
        	COMPANY_ID,
   			GROUP_ID, 
   			NAME, 
   			DISPLAY_NAME,
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		FROM V2_GROUP WHERE GROUP_ID = ?
    ]]></sql-query>


	<sql-query name="UPDATE_GROUP" description="그룹  수정"><![CDATA[        
        UPDATE V2_GROUP
            SET 
            NAME = ?, 
            DISPLAY_NAME = ?,
            DESCRIPTION = ? , 
            MODIFIED_DATE = ?
        WHERE GROUP_ID = ?
    ]]></sql-query>
	
	<sql-query name="SELECT_GROUP_BY_NAME" description="그룹 조회">
		<dynamic><![CDATA[
        SELECT
        	COMPANY_ID,
   			GROUP_ID, 
   			NAME, 
   			DISPLAY_NAME,
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		FROM V2_GROUP
  		WHERE <#if additional_parameter > LOWER(NAME) = ? <#else> NAME = ? </#if>
    ]]></dynamic>
	</sql-query>
		
	<sql-query name="COUNT_ALL_GROUP" description="전체 그룹 수를 조회"><![CDATA[
		SELECT COUNT(GROUP_ID)
		FROM V2_GROUP
    ]]></sql-query>
    
    <sql-query name="SELECT_ALL_GROUP_ID" description="모든 그룹 아이디를 조회"><![CDATA[
		SELECT GROUP_ID FROM V2_GROUP ORDER BY NAME
    ]]></sql-query>
    
	<sql-query name="SELECT_GROUPS_FOR_USER" description="사용자의 모든 그룹아이디를 조회"><![CDATA[
		SELECT GROUP_ID
		FROM V2_GROUP_MEMBERS 
		WHERE USER_ID = ? AND ADMINISTRATOR = 0
    ]]></sql-query>

	<sql-query name="DELETE_ALL_GROUP_MEMBERS" description="그룹 맴버 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ?
    ]]></sql-query>
	<sql-query name="DELETE_GROUP" description="그룹 삭제"><![CDATA[
		DELETE FROM V2_GROUP WHERE GROUP_ID = ?
    ]]></sql-query>
	<sql-query name="DELETE_MEMBERSHIP_BY_USER" description="사용자의 모든 그룹 맴버 정보를 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE USER_ID = ?
    ]]></sql-query>
    
    <sql-query name="SELECT_USER_ID_FROM_GROUP_BY_GROUP_ID_AND_USER_ID" description="그룹  관리자 추가"><![CDATA[
		SELECT USER_ID T  FROM V2_GROUP_MEMBERS WHERE GROUP_ID=? AND USER_ID=? AND ADMINISTRATOR=0
    ]]></sql-query>
    
    
	<sql-query name="ADD_GROUP_ADMIN" description="그룹  관리자 추가"><![CDATA[
		INSERT INTO V2_GROUP_MEMBERS (GROUP_ID, USER_ID, ADMINISTRATOR) VALUES ( ?, ?, 1)
    ]]></sql-query>
    
	<sql-query name="ADD_GROUP_MEMBER" description="그룹 맴버 추가"><![CDATA[
		INSERT INTO V2_GROUP_MEMBERS (GROUP_ID, USER_ID, ADMINISTRATOR) VALUES ( ?, ?, 0)
    ]]></sql-query>

	<sql-query name="ADD_GROUP_MEMBERSHIP" description="그룹 맴버 추가"><![CDATA[
		INSERT INTO V2_GROUP_MEMBERS (GROUP_ID, USER_ID, ADMINISTRATOR) VALUES ( ?, ?, ?)
    ]]></sql-query>

	<sql-query name="REMOVE_GROUP_MEMBERSHIP" description="그룹 맴버 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND USER_ID = ? AND ADMINISTRATOR = ? 
    ]]></sql-query>


	<sql-query name="REMOVE_GROUP_ADMIN" description="그룹  관리자 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND USER_ID = ? AND ADMINISTRATOR = 1
    ]]></sql-query>
	<sql-query name="REMOVE_GROUP_MEMBER" description="그룹 맴버 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND USER_ID = ? AND ADMINISTRATOR = 0
    ]]></sql-query>
	<sql-query name="TEST_GROUP_MEMBERSHIP" description="그룹 맴버 테스트"><![CDATA[
		SELECT USER_ID FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND USER_ID = ? AND ADMINISTRATOR = 0
    ]]></sql-query>
	<sql-query name="SELECT_ALL_GROUP_MEMBER_ID" description="그룹 맴버 조회"><![CDATA[
		SELECT USER_ID FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND ADMINISTRATOR = 0
    ]]></sql-query>
	<sql-query name="SELECT_ALL_GROUP_ADMIN_ID" description="그룹 맴버 조회"><![CDATA[
		SELECT USER_ID FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND ADMINISTRATOR = 1
    ]]></sql-query>

	<sql-query name="COUNT_ALL_GROUP_MEMBER" description="특정 그룹  맴버수를 조회"><![CDATA[
		SELECT COUNT(GROUP_ID)
		FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND ADMINISTRATOR = 0
    ]]></sql-query>    

	<sql-query name="UPDATE_GROUP_MODIFIED_DATE" description="그룹 수정일 업데이트"><![CDATA[        
        UPDATE V2_GROUP
        SET MODIFIED_DATE = ?
        WHERE GROUP_ID = ?
    ]]></sql-query>

	<!-- ROLE -->
	<sql-query name="CREATE_ROLE" description="CREATE_ROLE"><![CDATA[                 
    INSERT INTO V2_ROLE ( 
    	ROLE_ID, 
    	NAME, 
    	MASK,
    	DESCRIPTION, 
    	CREATION_DATE, 
    	MODIFIED_DATE 
    ) VALUES ( ?, ?, ?, ?, ? )
    ]]></sql-query>

	<sql-query name="DELETE_ROLE" description="CREATE_ROLE"><![CDATA[                 
    DELETE FROM V2_ROLE WHERE ROLE_ID = ? 
    ]]></sql-query>

	<sql-query name="UPDATE_ROLE" description="CREATE_ROLE"><![CDATA[                 
    UPDATE V2_ROLE
	SET  NAME          = ?,
	        MASK   = ?,
	       DESCRIPTION   = ?,
	       MODIFIED_DATE = ?
	WHERE  ROLE_ID       = ?
    ]]></sql-query>

	<sql-query name="SELECT_ROLE_BY_ID" description="SELECT_ROLE_BY_ID"><![CDATA[                 
    SELECT 
        ROLE_ID, 
        NAME, 
        MASK,
        DESCRIPTION, 
        CREATION_DATE, 
        MODIFIED_DATE
	FROM V2_ROLE 
	WHERE ROLE_ID = ?
    ]]></sql-query>

	<sql-query name="SELECT_ROLE_BY_NAME" description="SELECT_ROLE_BY_NAME">
		<dynamic><![CDATA[
    SELECT
   		ROLE_ID, 
   		NAME, 
   		 MASK,
   		DESCRIPTION, 
  		CREATION_DATE, 
  		MODIFIED_DATE
  	FROM V2_ROLE 
  	WHERE <#if additional_parameter > LOWER(NAME) = ? <#else> NAME = ? </#if>
    ]]></dynamic>
	</sql-query>

	<sql-query name="COUNT_ALL_ROLES" description="COUNT_ALL_ROLES"><![CDATA[
    SELECT count(ROLE_ID) FROM V2_ROLE
    ]]></sql-query>

	<sql-query name="SELECT_ALL_ROLE_IDS" description="SELECT_ALL_ROLE_IDS"><![CDATA[
    SELECT ROLE_ID FROM V2_ROLE
    ]]></sql-query>

	<sql-query name="SELECT_USER_ROLE_IDS" description="SELECT_USER_ROLE_IDS"><![CDATA[
    SELECT ROLE_ID FROM V2_USER_ROLES WHERE USER_ID = ?
    ]]></sql-query>

	<sql-query name="SELECT_GROUP_ROLE_IDS" description="SELECT_GROUP_ROLE_IDS"><![CDATA[
    SELECT ROLE_ID FROM V2_GROUP_ROLES WHERE GROUP_ID = ?
    ]]></sql-query>

	<sql-query name="DELETE_GROUP_ROLES" description="DELETE_GROUP_ROLES"><![CDATA[                 
    DELETE FROM V2_GROUP_ROLES WHERE GROUP_ID = ? 
    ]]></sql-query>

	<sql-query name="DELETE_USER_ROLES" description="DELETE_USER_ROLES"><![CDATA[                 
    DELETE FROM V2_USER_ROLES WHERE USER_ID = ? 
    ]]></sql-query>

	<sql-query name="DELETE_GROUP_ROLE" description="DELETE_GROUP_ROLE"><![CDATA[                 
    DELETE FROM V2_GROUP_ROLES WHERE ROLE_ID = ? AND GROUP_ID = ? 
    ]]></sql-query>

	<sql-query name="DELETE_USER_ROLE" description="DELETE_USER_ROLE"><![CDATA[                 
    DELETE FROM V2_USER_ROLES WHERE ROLE_ID = ? AND USER_ID = ? 
    ]]></sql-query>

	<sql-query name="CREATE_USER_ROLE" description="CREATE_USER_ROLE"><![CDATA[   
	INSERT INTO V2_USER_ROLES (ROLE_ID, USER_ID) VALUES ( ?, ? )
	]]></sql-query>

	<sql-query name="CREATE_GROUP_ROLE" description="CREATE_GROUP_ROLE"><![CDATA[   
	INSERT INTO V2_GROUP_ROLES (ROLE_ID, GROUP_ID) VALUES ( ?, ? )
	]]></sql-query>


	<sql-query name="SELECT_ALL_PERMISSION_MASK" description="SELECT_ALL_PERMISSION_MASK"><![CDATA[   
	    SELECT NAME, MASK FROM V2_PERMISSION_MASK
	]]></sql-query>

	<sql-query name="SELECT_PERMISSION_MASK_BY_NAME" description="SELECT_PERMISSION_MASK_BY_NAME"><![CDATA[   
	    SELECT MASK FROM V2_PERMISSION_MASK 
	    WHERE NAME = ?
	]]></sql-query>

	<sql-query name="DELETE_PERMISSION_MASK_BY_NAME" description="DELETE_PERMISSION_MASK_BY_NAME"><![CDATA[   
	    DELETE FROM V2_PERMISSION_MASK 
	    WHERE NAME = ?
	]]></sql-query>

	<sql-query name="CREATE_PERMISSION_MASK" description="CREATE_PERMISSION_MASK"><![CDATA[   
	    INSERT INTO V2_PERMISSION_MASK 
	    (NAME, MASK) VALUES (?, ?)
	]]></sql-query>

</sqlset>