<?xml version="1.0" encoding="UTF-8"?>
<sqlset>
    <name>ARCHITECTURE_SECURITY</name>
    <version>2.0</version>
    <description>Queries for SECURITY</description>
    <version></version>
    
	<!-- USER PROPERTY -->
	<sql-query name="SELECT_USER_ID_BY_PROPERTY" description="프로퍼티에 해당하는 사용자 검색" ><![CDATA[
	    SELECT USER_ID FROM V2_USER_PROPERTY
	    WHERE PROPERTY_NAME = ? AND PROPERTY_VALUE = ?
	 ]]></sql-query>
	 
	 <!--  USER  -->
	<sql-query name="SELECT_ALL_USER" description="전체 사용자를 조회"><![CDATA[
		SELECT 
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER
    ]]></sql-query>

	<sql-query name="SELECT_ALL_VISIBLE_USER" description="전체 사용자를 조회"><![CDATA[
		SELECT 
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE VISIBLE = 1
    ]]></sql-query>

	<sql-query name="SELECT_ALL_ENABLED_USER" description="전체 로컬 사용자를 조회"><![CDATA[
		SELECT 
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE VISIBLE = 1 AND USER_ENABLED =1 AND IS_EXTERNAL = 0
    ]]></sql-query>

	<sql-query name="SELECT_USER_BY_ID" description="USER_ID 에 해당하는 사용자를 조회"><![CDATA[
		SELECT 
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE USER_ID = ?
    ]]></sql-query>

	<sql-query name="SELECT_USER_BY_EMAIL" description="메일 주소에 해당하는 사용자를 조회"><![CDATA[
		SELECT 
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE VISIBLE = 1 AND EMAIL LIKE ?
    ]]></sql-query>

	<sql-query name="SELECT_USER_BY_USERNAME" description="USERNAME에 해당하는 사용자를 조회."><![CDATA[
		SELECT 
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE USERNAME = ?
    ]]></sql-query>

	<sql-query name="SELECT_USER_BY_USERNAME_NOCASE"
		description="USERNAME에 해당하는 사용자를 조회. USERNAME은 모두 소문자로 비교한다."><![CDATA[
		SELECT 
			USER_ID, 
			USERNAME, 
			PASSWORD_HASH, 
			NAME, 
			NAME_VISIBLE, 
			FIRST_NAME, 
		    LAST_NAME, 
		    EMAIL, 
		    EMAIL_VISIBLE, 
		    LAST_LOGINED_IN, 
		    LAST_PROFILE_UPDATE, 
		    USER_ENABLED, 
		    VISIBLE, 
		    IS_EXTERNAL, 
		    FEDERATED, 
		    STATUS,
		    CREATION_DATE, 
		    MODIFIED_DATE
		FROM V2_USER WHERE LOWER(USERNAME) = ?
    ]]></sql-query>

	<sql-query name="UPDATE_USER" description="사용자 업데이트"><![CDATA[ 
       UPDATE V2_USER SET	  
	       NAME                = ?,
	       FIRST_NAME          = ?,
	       LAST_NAME           = ?,       
	       NAME_VISIBLE        = ?,
	       EMAIL               = ?,
	       EMAIL_VISIBLE       = ?,
	       MODIFIED_DATE       = ?,
	       LAST_LOGINED_IN     = ?,
	       LAST_PROFILE_UPDATE = ?,
	       USERNAME            = ?,
	       IS_EXTERNAL         = ?,
	       FEDERATED           = ?,
	       STATUS              = ?
       WHERE USER_ID       = ?
    ]]></sql-query>

	<sql-query name="CREATE_USER" description="사용자 추가"><![CDATA[   
        INSERT INTO V2_USER (
   			USER_ID, 
   			USERNAME, 
   			PASSWORD_HASH, 
   			NAME, 
   			NAME_VISIBLE, 
   			FIRST_NAME, 
   			LAST_NAME, 
   			EMAIL, 
   			EMAIL_VISIBLE, 
  			LAST_LOGINED_IN, 
  			LAST_PROFILE_UPDATE, 
  			USER_ENABLED, 
   			VISIBLE, 
   			IS_EXTERNAL, 
   			FEDERATED, 
   			STATUS,
   			CREATION_DATE, 
   			MODIFIED_DATE 
   		) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
     ]]></sql-query>

	<sql-query name="COUNT_ENABLED_USER" description="활성화된 내부 사용자 수"><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER WHERE VISIBLE = 1 AND USER_ENABLED = 1 AND IS_EXTERNAL = 0
    ]]></sql-query>

	<sql-query name="COUNT_VISIBLE_USER" description="활성화 되지 않은  사용자와 외부 사용자를 포함하는 전체 사용자 수 "><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER WHERE VISIBLE = 1
    ]]></sql-query>

	<sql-query name="COUNT_AUTHENTICATED_USER" description="인증된 전체 사용자 수 "><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER WHERE VISIBLE = 1 AND USER_ENABLED = 1 AND IS_EXTERNAL = 0 AND LAST_LOGINED_IN > 0
    ]]></sql-query>

	<sql-query name="COUNT_RECENT_USER" description="최근 등록된 사용자 수 "><![CDATA[
		SELECT count( USER_ID ) FROM V2_USER WHERE VISIBLE = 1 AND USER_ENABLED = 1 AND IS_EXTERNAL = 0 AND CREATION_DATE > ?
    ]]></sql-query>

	<sql-query name="SELECT_USER_ID_BY_STATUS" description="상태에 따른 사용자 아이디 조회 ">
		SELECT USER_ID FROM V2_USER
		<dynamic><![CDATA[        
        <#assign max_idx = additional_parameter?size >
        <#assign idx = 0 >  
        <#if 0 < max_idx >WHERE</#if>      
        <#list additional_parameter as parameter>
        <#assign idx = idx + 1 > 
        STATUS = ${additional_parameter} <#if idx < max_idx >OR</#if>
        </#list>        
    ]]></dynamic>
	</sql-query>

	<sql-query name="SELECT_USER_PROFILE_VALUES" description="사용자 전체 프로파일 값 조회"><![CDATA[
		SELECT 
			a.FIELD_ID, 
			b.FIELD_TYPE, 
			a.VALUE, 
			a.PRIMARY_VALUE, 
			b.IS_LIST 
		FROM V2_USER_PROFILE a, V2_PROFILE_FIELD b 
		WHERE a.FIELD_ID = b.FIELD_ID AND USER_ID = ?
    ]]></sql-query>

	<sql-query name="DELETE_USER_PROFILE_VALUES_BY_USER" description="사용자 프로파일 삭제"><![CDATA[
		DELETE FROM V2_USER_PROFILE
		WHERE USER_ID = ?
    ]]></sql-query>

	<sql-query name="DELETE_USER_PROFILE_VALUES_BY_PROFILE"
		description="사용자 프로파일 삭제"><![CDATA[
		DELETE FROM V2_USER_PROFILE
		WHERE FIELD_ID = ?
    ]]></sql-query>

	<sql-query name="INSERT_USER_PROFILE_VALUE" description="사용자 프로파일 추가"><![CDATA[
		INSERT INTO V2_USER_PROFILE (
		   USER_ID, FIELD_ID, PRIMARY_VALUE, VALUE) 
		VALUES ( ?, ?, ?, ?)
    ]]></sql-query>

	<sql-query name="SELECT_PROFILE_FIELD_DISTINCT_VALUES_PER_FIELD"
		description="SELECT_PROFILE_FIELD_DISTINCT_VALUES_PER_FIELD">
		<dynamic><![CDATA[
	    SELECT up.FIELD_ID,
	       pe.FIELD_TYPE, 
	       up.VALUE, 
	       COUNT(up.VALUE) as CNT
	    FROM V2_USER ju, V2_USER_PROFILE up, V2_PROFILE_FIELD pe 
	    WHERE pe.FIELD_ID = up.FIELD_ID 
	    AND ju.USER_ID = up.USER_ID 
	    AND pe.IS_LIST = 0 
	    AND up.FIELD_ID = ? 
	    <#if additional_parameter >
	    AND ju.USER_ENABLED = 1 
	    </#if>	    
	    AND up.VALUE IS NOT NULL 
	    AND pe.IS_FILTERABLE = 1 
	GROUP by up.VALUE, pe.FIELD_TYPE, up.FIELD_ID ORDER by LOWER(up.VALUE)
     ]]></dynamic>
	</sql-query>

	<sql-query name="SELECT_PROFILE_FIELD_DISTINCT_VALUES_PER_USER"
		description="SELECT_PROFILE_FIELD_DISTINCT_VALUES_PER_USER "><![CDATA[
		SELECT 
			DISTINCT up.FIELD_ID, 
			pe.FIELD_TYPE, 
			up.VALUE 
		FROM V2_USER_PROFILE up, V2_PROFILE_FIELD pe 
		WHERE pe.FIELD_ID = up.FIELD_ID AND IS_LIST = 0
		AND up.USER_ID = ? 
		AND IS_FILTERABLE = 1 
		AND value IS NOT NULL
     ]]></sql-query>

	<sql-query name="CREATE_PROFILE_FIELD"
		description="SELECT_PROFILE_FIELD_DISTINCT_VALUES_PER_USER "><![CDATA[
     	INSERT INTO V2_PROFILE_FIELD (
   		    FIELD_ID, 
   		    FIELD_TYPE, 
   		    NAME, 
   		    IDX, 
   		    REG_IDX, 
   		    IS_DEFAULT, 
   		    IS_EDITABLE, 
   		    IS_FILTERABLE, 
   		    IS_LIST, 
   		    IS_REQUIRED, 
   		    IS_SEARCHABLE, 
   		    IS_VISIBLE, 
   		    EXTERNAL_MANAGED, 
   		    EXTERNAL_MAPPING 
   	    ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
     ]]></sql-query>

	<sql-query name="SELECT_PROFILE_FIELD_BY_FIELD_ID" description="SELECT_PROFILE_FIELD_BY_FIELD_ID "><![CDATA[
         SELECT 
		   FIELD_ID, 
		   FIELD_TYPE, 
		   NAME, 
		   IDX, 
		   REG_IDX, 
		   IS_DEFAULT, 
		   IS_EDITABLE, 
		   IS_FILTERABLE,
		   IS_LIST, 
		   IS_REQUIRED, 
		   IS_SEARCHABLE, 
		   IS_VISIBLE, 
		   EXTERNAL_MANAGED, 
		   EXTERNAL_MAPPING
	     FROM V2_PROFILE_FIELD WHERE FIELD_ID = ?	 
     ]]></sql-query>

	<sql-query name="SELECT_ALL_PROFILE_FIELD" description="SELECT_ALL_PROFILE_FIELD"><![CDATA[
     SELECT 
		   FIELD_ID, 
		   IDX		  
	 FROM V2_PROFILE_FIELD ORDER BY IDX
     ]]></sql-query>

	<sql-query name="UPDATE_PROFILE_FIELD_INDEX" description="UPDATE_PROFILE_FIELD_INDEX"><![CDATA[
     UPDATE  V2_PROFILE_FIELD
     SET IDX = IDX - 1
     WHERE IDX > ?
     ]]></sql-query>

	<sql-query name="UPDATE_PROFILE_FIELD_INDEX_1" description="UPDATE_PROFILE_FIELD_INDEX"><![CDATA[
     UPDATE  V2_PROFILE_FIELD
     SET IDX = IDX - 1
     WHERE IDX > ?
     ]]></sql-query>

	<sql-query name="UPDATE_PROFILE_FIELD_INDEX_2" description="UPDATE_PROFILE_FIELD_INDEX_2"><![CDATA[
     UPDATE V2_PROFILE_FIELD SET IDX = IDX + 1 WHERE IDX >= ? AND IDX < ?
     ]]></sql-query>

	<sql-query name="UPDATE_PROFILE_FIELD_INDEX_3" description="UPDATE_PROFILE_FIELD_INDEX_2"><![CDATA[
     UPDATE V2_PROFILE_FIELD SET IDX = IDX - 1 WHERE IDX <= ? AND IDX > ?
     ]]></sql-query>

	<sql-query name="UPDATE_PROFILE_FIELD_INDEX_4" description="UPDATE_PROFILE_FIELD_INDEX_2"><![CDATA[
     UPDATE V2_PROFILE_FIELD SET IDX = ? WHERE FIELD_ID = ?
     ]]></sql-query>

	<sql-query name="UPDATE_PROFILE_FIELD" description="UPDATE_PROFILE_FIELD "><![CDATA[
         UPDATE V2_PROFILE_FIELD
	     SET    
	        FIELD_TYPE       = ?,
	        NAME             = ?,
	        IDX              = ?,
	        REG_IDX          = ?,
	        IS_DEFAULT       = ?,
	        IS_EDITABLE      = ?,
	        IS_FILTERABLE    = ?,
	        IS_LIST          = ?,
	        IS_REQUIRED      = ?,
	        IS_SEARCHABLE    = ?,
	        IS_VISIBLE       = ?,
	        EXTERNAL_MANAGED = ?,
	        EXTERNAL_MAPPING = ?
	     WHERE  FIELD_ID         = ?
     ]]></sql-query>

	<sql-query name="DELETE_PROFILE_FIELD" description="DELETE_PROFILE_FIELD"><![CDATA[
	DELETE FROM V2_PROFILE_FIELD WHERE FIELD_ID = ?
    ]]></sql-query>

	<sql-query name="DELETE_PROFILE_FIELD_OPTIONS" description="DELETE_PROFILE_FIELD_OPTIONS"><![CDATA[
	DELETE FROM V2_PROFILE_FIELD WHERE FIELD_ID = ?
    ]]></sql-query>

	<sql-query name="CREATE_PROFILE_FIELD_OPTIONS" description="CREATE_PROFILE_FIELD_OPTIONS"><![CDATA[                 
	INSERT INTO V2_PROFILE_FIELD_OPT (
	   DEFAULT_OPTION, 
	   FIELD_ID, 
	   FIELD_VALUE, 
	   IDX) VALUES ( ?, ?, ?, ?)
    ]]></sql-query>

	<sql-query name="SELECT_PROFILE_FIELD_OPTIONS" description="CREATE_PROFILE_FIELD_OPTIONS"><![CDATA[                 
	SELECT 
		FIELD_ID, 
		FIELD_VALUE, 
		IDX, 
		DEFAULT_OPTION 
	FROM V2_PROFILE_FIELD_OPT 
	WHERE FIELD_ID = ? ORDER BY IDX
    ]]></sql-query>


	<!-- GROUP -->
	<sql-query name="SELECT_GROUPS_FOR_USER" description="사용자의 모든 그룹아이디를 조회"><![CDATA[
		SELECT GROUP_ID
		FROM V2_GROUP_MEMBERS 
		WHERE USER_ID = ? AND ADMINISTRATOR = 0
    ]]></sql-query>
	<sql-query name="COUNT_ALL_GROUPS" description="전체 그룹 수를 조회"><![CDATA[
		SELECT COUNT(GROUP_ID)
		FROM V2_GROUPS 
    ]]></sql-query>
	<sql-query name="DELETE_ALL_GROUP_MEMBERS" description="그룹 맴버 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ?
    ]]></sql-query>
	<sql-query name="DELETE_GROUP" description="그룹 삭제"><![CDATA[
		DELETE FROM V2_GROUPS WHERE GROUP_ID = ?
    ]]></sql-query>
	<sql-query name="DELETE_MEMBERSHIP_BY_USER" description="사용자의 모든 그룹 맴버 정보를 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE USER_ID = ?
    ]]></sql-query>
	<sql-query name="SELECT_ALL_GROUP_ID" description="모든 그룹 아이디를 조회"><![CDATA[
		SELECT GROUP_ID FROM V2_GROUPS ORDER BY NAME
    ]]></sql-query>
	<sql-query name="ADD_GROUP_ADMIN" description="그룹  관리자 추가"><![CDATA[
		INSERT INTO V2_GROUP_MEMBERS (GROUP_ID, USER_ID, ADMINISTRATOR) VALUES ( ?, ?, 1)
    ]]></sql-query>
	<sql-query name="ADD_GROUP_MEMBER" description="그룹 맴버 추가"><![CDATA[
		INSERT INTO V2_GROUP_MEMBERS (GROUP_ID, USER_ID, ADMINISTRATOR) VALUES ( ?, ?, 0)
    ]]></sql-query>

	<sql-query name="ADD_GROUP_MEMBERSHIP" description="그룹 맴버 추가"><![CDATA[
		INSERT INTO V2_GROUP_MEMBERS (GROUP_ID, USER_ID, ADMINISTRATOR) VALUES ( ?, ?, ?)
    ]]></sql-query>

	<sql-query name="REMOVE_GROUP_MEMBERSHIP" description="그룹 맴버 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND USER_ID = ? AND ADMINISTRATOR = ? 
    ]]></sql-query>


	<sql-query name="ADD_GROUP_ADMIN" description="그룹  관리자 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND USER_ID = ? AND ADMINISTRATOR = 1
    ]]></sql-query>
	<sql-query name="ADD_GROUP_MEMBER" description="그룹 맴버 삭제"><![CDATA[
		DELETE FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND USER_ID = ? AND ADMINISTRATOR = 0
    ]]></sql-query>
	<sql-query name="TEST_GROUP_MEMBERSHIP" description="그룹 맴버 테스트"><![CDATA[
		SELECT USER_ID FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND USER_ID = ? AND ADMINISTRATOR = 0
    ]]></sql-query>
	<sql-query name="SELECT_ALL_GROUP_MEMBER_ID" description="그룹 맴버 조회"><![CDATA[
		SELECT USER_ID FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND ADMINISTRATOR = 0
    ]]></sql-query>
	<sql-query name="SELECT_ALL_GROUP_ADMIN_ID" description="그룹 맴버 조회"><![CDATA[
		SELECT USER_ID FROM V2_GROUP_MEMBERS WHERE GROUP_ID = ? AND ADMINISTRATOR = 1
    ]]></sql-query>

	<sql-query name="CREATE_GROUP" description="그룹 생성"><![CDATA[    
    	INSERT INTO V2_GROUPS (
   			GROUP_ID, 
   			NAME, 
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		) VALUES ( ?, ?, ?, ?, ?)
    ]]></sql-query>

	<sql-query name="SELECT_GROUP_BY_ID" description="그룹 조회"><![CDATA[    
        SELECT
   			GROUP_ID, 
   			NAME, 
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		FROM V2_GROUPS WHERE GROUP_ID = ?
    ]]></sql-query>

	<sql-query name="SELECT_GROUP_BY_NAME" description="그룹 조회">
		<dynamic><![CDATA[
        SELECT
   			GROUP_ID, 
   			NAME, 
   			DESCRIPTION, 
  			CREATION_DATE, 
  			MODIFIED_DATE
  		FROM V2_GROUPS 
  		WHERE <#if additional_parameter > LOWER(NAME) = ? <#else> NAME = ? </#if>
    ]]></dynamic>
	</sql-query>

	<sql-query name="UPDATE_GROUP" description="그룹  수정">
		<dynamic><![CDATA[        
        UPDATE V2_GROUPS
        SET NAME = ?, DESCRIPTION = ? , MODIFIED_DATE = ?
        WHERE GROUP_ID = ?
    ]]></dynamic>
	</sql-query>

	<sql-query name="UPDATE_GROUP_MODIFIED_DATE" description="그룹 수정일 업데이트"><![CDATA[        
        UPDATE V2_GROUPS
        SET MODIFIED_DATE = ?
        WHERE GROUP_ID = ?
    ]]></sql-query>


	<!-- role -->
	<sql-query name="CREATE_ROLE" description="CREATE_ROLE"><![CDATA[                 
    INSERT INTO V2_ROLES ( 
    	ROLE_ID, 
    	NAME, 
    	DESCRIPTION, 
    	CREATION_DATE, 
    	MODIFIED_DATE 
    ) VALUES ( ?, ?, ?, ?, ? )
    ]]></sql-query>

	<sql-query name="DELETE_ROLE" description="CREATE_ROLE"><![CDATA[                 
    DELETE FROM V2_ROLES WHERE ROLE_ID = ? 
    ]]></sql-query>

	<sql-query name="UPDATE_ROLE" description="CREATE_ROLE"><![CDATA[                 
    UPDATE V2_ROLES
	SET    NAME          = ?,
	       DESCRIPTION   = ?,
	       MODIFIED_DATE = ?
	WHERE  ROLE_ID       = ?
    ]]></sql-query>

	<sql-query name="SELECT_ROLE_BY_ID" description="SELECT_ROLE_BY_ID"><![CDATA[                 
    SELECT 
        ROLE_ID, 
        NAME, 
        DESCRIPTION, 
        CREATION_DATE, 
        MODIFIED_DATE
	FROM V2_ROLES 
	WHERE ROLE_ID = ?
    ]]></sql-query>

	<sql-query name="SELECT_ROLE_BY_NAME" description="SELECT_ROLE_BY_NAME">
		<dynamic><![CDATA[
    SELECT
   		ROLE_ID, 
   		NAME, 
   		DESCRIPTION, 
  		CREATION_DATE, 
  		MODIFIED_DATE
  	FROM V2_ROLES 
  	WHERE <#if additional_parameter > LOWER(NAME) = ? <#else> NAME = ? </#if>
    ]]></dynamic>
	</sql-query>

	<sql-query name="COUNT_ALL_ROLES" description="COUNT_ALL_ROLES"><![CDATA[
    SELECT SELECT(ROLE_ID) FROM V2_ROLES
    ]]></sql-query>

	<sql-query name="SELECT_ALL_ROLE_IDS" description="SELECT_ALL_ROLE_IDS"><![CDATA[
    SELECT ROLE_ID FROM V2_ROLES
    ]]></sql-query>

	<sql-query name="SELECT_USER_ROLE_IDS" description="SELECT_USER_ROLE_IDS"><![CDATA[
    SELECT ROLE_ID FROM V2_USER_ROLES WHERE USER_ID = ?
    ]]></sql-query>

	<sql-query name="SELECT_GROUP_ROLE_IDS" description="SELECT_GROUP_ROLE_IDS"><![CDATA[
    SELECT ROLE_ID FROM V2_GROUP_ROLES WHERE GROUP_ID = ?
    ]]></sql-query>

	<sql-query name="DELETE_GROUP_ROLES" description="DELETE_GROUP_ROLES"><![CDATA[                 
    DELETE FROM V2_GROUP_ROLES WHERE GROUP_ID = ? 
    ]]></sql-query>

	<sql-query name="DELETE_USER_ROLES" description="DELETE_USER_ROLES"><![CDATA[                 
    DELETE FROM V2_USER_ROLES WHERE USER_ID = ? 
    ]]></sql-query>

	<sql-query name="DELETE_GROUP_ROLE" description="DELETE_GROUP_ROLE"><![CDATA[                 
    DELETE FROM V2_GROUP_ROLES WHERE ROLE_ID = ? AND GROUP_ID = ? 
    ]]></sql-query>

	<sql-query name="DELETE_USER_ROLE" description="DELETE_USER_ROLE"><![CDATA[                 
    DELETE FROM V2_USER_ROLES WHERE ROLE_ID = ? AND USER_ID = ? 
    ]]></sql-query>

	<sql-query name="CREATE_USER_ROLE" description="CREATE_USER_ROLE"><![CDATA[   
	INSERT INTO V2_USER_ROLES (ROLE_ID, USER_ID) VALUES ( ?, ? )
	]]></sql-query>

	<sql-query name="CREATE_GROUP_ROLE" description="CREATE_GROUP_ROLE"><![CDATA[   
	INSERT INTO V2_GROUP_ROLES (ROLE_ID, GROUP_ID) VALUES ( ?, ? )
	]]></sql-query>

	<sql-query name="SELECT_ALL_PERMISSION_MASK" description="SELECT_ALL_PERMISSION_MASK"><![CDATA[   
	    SELECT NAME, MASK FROM V2_PERMISSION_MASK
	]]></sql-query>

	<sql-query name="SELECT_PERMISSION_MASK_BY_NAME" description="SELECT_PERMISSION_MASK_BY_NAME"><![CDATA[   
	    SELECT MASK FROM V2_PERMISSION_MASK 
	    WHERE NAME = ?
	]]></sql-query>

	<sql-query name="DELETE_PERMISSION_MASK_BY_NAME" description="DELETE_PERMISSION_MASK_BY_NAME"><![CDATA[   
	    DELETE FROM V2_PERMISSION_MASK 
	    WHERE NAME = ?
	]]></sql-query>

	<sql-query name="CREATE_PERMISSION_MASK" description="CREATE_PERMISSION_MASK"><![CDATA[   
	    INSERT INTO V2_PERMISSION_MASK 
	    (NAME, MASK) VALUES (?, ?)
	]]></sql-query>



</sqlset>