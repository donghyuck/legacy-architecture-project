<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
	default-autowire="no" 
	default-lazy-init="false"
	default-init-method="init" 
	default-destroy-method="destroy">
	<description>
	<![CDATA[
        Define Bootstrap Context
	]]>
	</description>
	<!-- ================================================ -->	
	<!--  Task & Jobs                                     -->
	<!-- ================================================ -->	
	<!-- Global Timer for timed execution tasks. -->
    <bean id="taskTimer" class="org.springframework.scheduling.timer.TimerFactoryBean" p:daemon="false" />    
    
    <!-- Spring task executor replaces the custom task engine. -->
    <bean id="minuteTaskExecutor" class="org.springframework.scheduling.timer.TimerTaskExecutor" p:delay="6000" p:timer-ref="taskTimer"  depends-on="taskTimer" />

	<!-- ================================================ -->	
	<!--  Event                                           -->
	<!-- ================================================ -->	
	<bean id="eventThreadPoolConfiguration" class="architecture.common.event.internal.EventThreadPoolConfigurationImpl" />
	
	<bean id="listenerHandlerConfiguration" class="architecture.common.event.internal.ListenerHandlerConfigurationImpl" />

	<bean id="eventExecutorFactory" class="architecture.common.event.internal.EventExecutorFactoryImpl" depends-on="eventThreadPoolConfiguration" >
		<constructor-arg ref="eventThreadPoolConfiguration"/>
	</bean>

	<bean id="eventDispatcher" class="architecture.common.event.internal.AsynchronousAbleEventDispatcher">
		<constructor-arg ref="eventExecutorFactory"/>
    </bean>

	<bean id="eventPublisher" class="architecture.common.event.internal.EventPublisherImpl" >
		<constructor-arg ref="eventDispatcher"/>
		<constructor-arg ref="listenerHandlerConfiguration"/>
	</bean>
				
	<!-- ================================================ -->	
	<!--  Plugin                                          -->
	<!-- ================================================ -->	
	<bean id="pluginCacheRegistry" class="architecture.common.plugin.internal.PluginCacheRegistryImpl" depends-on="cacheManager" >
	    <constructor-arg ref="cacheManager"/>
	</bean>	
	<!-- ================================================ -->	
	<!--  Cache                                           -->
	<!-- ================================================ -->	
	<bean id="cacheManager" class="net.sf.ehcache.CacheManager" destroy-method="shutdown" />
	
	<!-- ================================================ -->	
	<!--  Application                                     -->
	<!-- ================================================ -->	
	<bean id="adminService" class="architecture.ee.spring.lifecycle.internal.AdminServiceImpl" init-method="initialize" depends-on="eventPublisher"
		p:eventPublisher-ref="eventPublisher" p:contextLoader-ref="contextLoader" p:configRootHelper-ref="configRootHelper" />
	
	<bean id="contextLoader" class="architecture.ee.spring.context.internal.WebApplicationContextLoader" />		
		
	<bean id="configRootHelper" class="architecture.ee.spring.lifecycle.internal.ConfigRootHelperImpl"/>

	<!-- ================================================ -->	
	<!--  Database                                        -->
	<!-- ================================================ -->	
	<bean id="sqlConfiguration" class="architecture.ee.jdbc.query.factory.ConfigurationFactory" factory-method="getConfiguration" />
	
	<bean id="sqlQueryFactoryBuilder" class="architecture.ee.spring.jdbc.SqlQueryFactoryBuilder" init-method="initialize">
	    <constructor-arg ref="sqlConfiguration"/>
		<property name="resourceLocations">
			<list>
				<value>res:config/sql/framework-queryset.xml</value>
			</list>
		</property>
	</bean>		
		
</beans>