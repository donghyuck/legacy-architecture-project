architecture.common.event.api.AsynchronousPreferred -> architecture.common.event.api.AsynchronousPreferred:
architecture.common.event.api.EventListener -> architecture.common.event.api.EventListener:
architecture.common.event.api.EventPublisher -> architecture.common.event.api.EventPublisher:
    void publish(java.lang.Object) -> publish
    void register(java.lang.Object) -> register
    void unregister(java.lang.Object) -> unregister
    void unregisterAll() -> unregisterAll
architecture.common.event.api.EventSource -> architecture.common.event.api.EventSource:
    void setEventPublisher(architecture.common.event.api.EventPublisher) -> setEventPublisher
architecture.common.event.config.EventThreadPoolConfiguration -> architecture.common.event.config.EventThreadPoolConfiguration:
    int getCorePoolSize() -> getCorePoolSize
    int getMaximumPoolSize() -> getMaximumPoolSize
    long getKeepAliveTime() -> getKeepAliveTime
    java.util.concurrent.TimeUnit getTimeUnit() -> getTimeUnit
architecture.common.event.config.ListenerHandlersConfiguration -> architecture.common.event.config.ListenerHandlersConfiguration:
    java.util.List getListenerHandlers() -> getListenerHandlers
architecture.common.event.internal.AnnotatedMethodsListenerHandler -> architecture.common.event.internal.AnnotatedMethodsListenerHandler:
    org.apache.commons.logging.Log log -> a
    java.lang.Class annotation -> a
    43:50:java.util.List getInvokers(java.lang.Object) -> getInvokers
architecture.common.event.internal.AnnotatedMethodsListenerHandler$1 -> architecture.common.event.internal.AnnotatedMethodsListenerHandler$a:
    java.lang.Object val$listener -> a
    51:51:java.lang.Object apply(java.lang.Object) -> apply
architecture.common.event.internal.AsynchronousAbleEventDispatcher -> architecture.common.event.internal.AsynchronousAbleEventDispatcher:
    java.util.concurrent.Executor SYNCHRONOUS_EXECUTOR -> a
    java.util.concurrent.Executor asynchronousExecutor -> b
    architecture.common.event.internal.AsynchronousEventResolver asynchronousEventResolver -> a
    63:70:void dispatch(architecture.common.event.spi.ListenerInvoker,java.lang.Object) -> dispatch
architecture.common.event.internal.AsynchronousAbleEventDispatcher$1 -> f:
    28:29:void execute(java.lang.Runnable) -> execute
architecture.common.event.internal.AsynchronousAbleEventDispatcher$2 -> architecture.common.event.internal.AsynchronousAbleEventDispatcher$a:
    architecture.common.event.spi.ListenerInvoker val$invoker -> a
    java.lang.Object val$event -> a
    67:68:void run() -> run
architecture.common.event.internal.AsynchronousEventResolver -> j:
    java.lang.Class annotationClass -> a
architecture.common.event.internal.EventExecutorFactoryImpl -> architecture.common.event.internal.EventExecutorFactoryImpl:
    architecture.common.event.config.EventThreadPoolConfiguration configuration -> a
    23:23:java.util.concurrent.Executor getExecutor() -> getExecutor
architecture.common.event.internal.EventPublisherImpl -> architecture.common.event.internal.EventPublisherImpl:
    architecture.common.event.spi.EventDispatcher eventDispatcher -> a
    java.util.List listenerHandlers -> a
    com.google.common.collect.Multimap listenerInvokers -> a
    71:72:void publish(java.lang.Object) -> publish
    76:76:void register(java.lang.Object) -> register
    81:82:void unregister(java.lang.Object) -> unregister
    86:89:void unregisterAll() -> unregisterAll
    94:106:void unregisterListener(java.lang.String) -> a
architecture.common.event.internal.EventPublisherImpl$1 -> architecture.common.event.internal.EventPublisherImpl$a:
    178:178:java.lang.Object get() -> get
architecture.common.event.internal.EventPublisherImpl$KeyedListenerInvoker -> architecture.common.event.internal.EventPublisherImpl$b:
    java.lang.String key -> a
    architecture.common.event.spi.ListenerInvoker invoker -> a
    210:210:int hashCode() -> hashCode
    216:225:boolean equals(java.lang.Object) -> equals
architecture.common.event.internal.EventThreadFactory -> architecture.common.event.internal.EventThreadFactory:
    java.util.concurrent.ThreadFactory delegateThreadFactory -> a
    29:31:java.lang.Thread newThread(java.lang.Runnable) -> newThread
architecture.common.event.internal.EventThreadPoolConfigurationImpl -> architecture.common.event.internal.EventThreadPoolConfigurationImpl:
    15:15:int getCorePoolSize() -> getCorePoolSize
    20:20:int getMaximumPoolSize() -> getMaximumPoolSize
    25:25:long getKeepAliveTime() -> getKeepAliveTime
    30:30:java.util.concurrent.TimeUnit getTimeUnit() -> getTimeUnit
architecture.common.event.internal.ListenerHandlerConfigurationImpl -> architecture.common.event.internal.ListenerHandlerConfigurationImpl:
    18:18:java.util.List getListenerHandlers() -> getListenerHandlers
architecture.common.event.internal.SingleParameterMethodListenerInvoker -> d:
    java.lang.reflect.Method method -> a
    java.lang.Object listener -> a
    30:30:java.util.Set getSupportedEventTypes() -> getSupportedEventTypes
    37:45:void invoke(java.lang.Object) -> invoke
    51:51:boolean supportAsynchronousEvents() -> supportAsynchronousEvents
architecture.common.event.spi.EventDispatcher -> architecture.common.event.spi.EventDispatcher:
    void dispatch(architecture.common.event.spi.ListenerInvoker,java.lang.Object) -> dispatch
architecture.common.event.spi.EventExecutorFactory -> architecture.common.event.spi.EventExecutorFactory:
    java.util.concurrent.Executor getExecutor() -> getExecutor
architecture.common.event.spi.ListenerHandler -> architecture.common.event.spi.ListenerHandler:
    java.util.List getInvokers(java.lang.Object) -> getInvokers
architecture.common.event.spi.ListenerInvoker -> architecture.common.event.spi.ListenerInvoker:
    java.util.Set getSupportedEventTypes() -> getSupportedEventTypes
    void invoke(java.lang.Object) -> invoke
    boolean supportAsynchronousEvents() -> supportAsynchronousEvents
architecture.common.exception.ComponentDisabledException -> architecture.common.exception.ComponentDisabledException:
architecture.common.exception.ComponentNotFoundException -> architecture.common.exception.ComponentNotFoundException:
architecture.common.exception.ConfigurationError -> architecture.common.exception.ConfigurationError:
architecture.common.exception.ConfigurationWarning -> architecture.common.exception.ConfigurationWarning:
architecture.common.exception.NullArgumentException -> architecture.common.exception.NullArgumentException:
    java.lang.String name -> name
    java.lang.Object index -> index
    106:106:java.lang.String getArgumentName() -> getArgumentName
    115:115:java.lang.Object getArgumentIndex() -> getArgumentIndex
    129:129:java.lang.String makeMessage(java.lang.String,java.lang.Object) -> a
architecture.common.exception.RuntimeError -> architecture.common.exception.RuntimeError:
architecture.common.exception.RuntimeWarning -> architecture.common.exception.RuntimeWarning:
architecture.common.i18n.Localizer -> architecture.common.i18n.Localizer:
    java.lang.String PREFIX_DELIM -> PREFIX_DELIM
    java.lang.String PREFIX -> PREFIX
    java.lang.String VERSION -> VERSION
    java.lang.String ID -> ID
    java.lang.String MESSAGE_BODY -> MESSAGE_BODY
    java.lang.String CAUSE -> CAUSE
    java.lang.String ACTION -> ACTION
    java.text.DecimalFormat decimalformat -> decimalformat
    java.util.ResourceBundle bundle -> a
    46:46:java.lang.String getVersion() -> getVersion
    50:57:java.lang.String getPrefix() -> getPrefix
    62:62:java.lang.String getBody(java.lang.String) -> getBody
    66:66:java.lang.String getBody(int) -> getBody
    70:70:java.lang.String getCause(java.lang.String) -> getCause
    74:74:java.lang.String getCause(int) -> getCause
    79:79:java.lang.String getString(java.lang.String,int) -> getString
    83:83:java.lang.String getString(java.lang.String,java.lang.String) -> getString
    88:88:java.lang.Object getObject(java.lang.String,java.lang.String) -> getObject
    92:92:java.lang.Object getObject(java.lang.String,int) -> getObject
    96:96:java.lang.String get(java.lang.String) -> get
architecture.common.i18n.LocalizerFactory -> architecture.common.i18n.LocalizerFactory:
    architecture.common.i18n.LocalizerFactory$Implementation impl -> a
    46:46:architecture.common.i18n.Localizer getLocalizer(java.lang.String) -> getLocalizer
    50:50:architecture.common.i18n.Localizer getLocalizer(java.lang.String,java.util.Locale) -> getLocalizer
    54:54:architecture.common.i18n.Localizer getLocalizer(java.lang.String,java.util.Locale,java.lang.ClassLoader) -> getLocalizer
architecture.common.i18n.LocalizerFactory$Implementation -> architecture.common.i18n.LocalizerFactory$Implementation:
    architecture.common.i18n.Localizer getLocalizer(java.lang.String,java.util.Locale,java.lang.ClassLoader) -> getLocalizer
    architecture.common.i18n.Localizer getLocalizer(java.lang.String,java.util.Locale) -> getLocalizer
    architecture.common.i18n.Localizer getLocalizer(java.lang.String) -> getLocalizer
architecture.common.i18n.impl.LocalizerFactoryImpl -> architecture.common.i18n.impl.LocalizerFactoryImpl:
    125:125:architecture.common.i18n.Localizer getLocalizer(java.lang.String) -> getLocalizer
    129:129:architecture.common.i18n.Localizer getLocalizer(java.lang.String,java.util.Locale) -> getLocalizer
    133:134:architecture.common.i18n.Localizer getLocalizer(java.lang.String,java.util.Locale,java.lang.ClassLoader) -> getLocalizer
architecture.common.i18n.impl.LocalizerFactoryImpl$LocalizerResourceBundleControl -> h:
    java.util.List FORMAT_DEFAULT -> a
    73:73:java.util.List getFormats(java.lang.String) -> getFormats
    80:118:java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean) -> newBundle
architecture.common.lifecycle.Application -> architecture.common.lifecycle.Application:
    architecture.common.lifecycle.ConfigRoot getConfigRoot() -> getConfigRoot
    java.lang.String getEffectiveRootPath() -> getEffectiveRootPath
    java.lang.String getRootURI() -> getRootURI
    architecture.common.lifecycle.Version getVersion() -> getVersion
    architecture.common.lifecycle.State getState() -> getState
    boolean isReady() -> isReady
    architecture.common.lifecycle.ApplicationProperties getApplicationProperties() -> getApplicationProperties
architecture.common.lifecycle.ApplicationConstants -> architecture.common.lifecycle.ApplicationConstants:
    java.lang.String EOL -> EOL
    java.lang.String DEFAULT_CHAR_ENCODING -> DEFAULT_CHAR_ENCODING
architecture.common.lifecycle.ApplicationHelper -> architecture.common.lifecycle.ApplicationHelper:
    architecture.common.lifecycle.Application getApplication() -> getApplication
architecture.common.lifecycle.ApplicationHelperFactory -> architecture.common.lifecycle.ApplicationHelperFactory:
    architecture.common.lifecycle.ApplicationHelperFactory$Implementation impl -> a
    35:35:architecture.common.lifecycle.ApplicationHelper getApplicationHelper() -> getApplicationHelper
architecture.common.lifecycle.ApplicationHelperFactory$Implementation -> architecture.common.lifecycle.ApplicationHelperFactory$Implementation:
    architecture.common.lifecycle.ApplicationHelper getApplicationHelper() -> getApplicationHelper
architecture.common.lifecycle.ApplicationHome -> architecture.common.lifecycle.ApplicationHome:
    java.io.File getHome() -> getHome
    java.lang.String getHomePath() -> getHomePath
    java.io.File getInstallRoot() -> getInstallRoot
    java.lang.String getInstallRootPath() -> getInstallRootPath
    java.lang.String getLogsPath() -> getLogsPath
    java.io.File getLogs() -> getLogs
architecture.common.lifecycle.ApplicationProperties -> architecture.common.lifecycle.ApplicationProperties:
    java.util.Collection getChildrenNames(java.lang.String) -> getChildrenNames
    java.util.Collection getPropertyNames() -> getPropertyNames
    boolean getBooleanProperty(java.lang.String) -> getBooleanProperty
    boolean getBooleanProperty(java.lang.String,boolean) -> getBooleanProperty
    int getIntProperty(java.lang.String,int) -> getIntProperty
architecture.common.lifecycle.ApplicationPropertiesSupport -> architecture.common.lifecycle.ApplicationPropertiesSupport:
    architecture.common.lifecycle.ApplicationProperties getApplicationProperties() -> getApplicationProperties
    java.lang.String getLocalProperty(java.lang.String) -> getLocalProperty
    int getLocalProperty(java.lang.String,int) -> getLocalProperty
    java.lang.String getLocalProperty(java.lang.String,java.lang.String) -> getLocalProperty
    java.util.List getLocalProperties(java.lang.String) -> getLocalProperties
    void setLocalProperty(java.lang.String,java.lang.String) -> setLocalProperty
    void setLocalProperties(java.util.Map) -> setLocalProperties
    void deleteLocalProperty(java.lang.String) -> deleteLocalProperty
    java.lang.String getApplicationProperty(java.lang.String) -> getApplicationProperty
    java.lang.String getApplicationProperty(java.lang.String,java.lang.String) -> getApplicationProperty
    java.util.List getApplicationPropertyNames() -> getApplicationPropertyNames
    java.util.List getApplicationPropertyNames(java.lang.String) -> getApplicationPropertyNames
    java.util.List getApplicationProperties(java.lang.String) -> getApplicationProperties
    int getApplicationIntProperty(java.lang.String,int) -> getApplicationIntProperty
    boolean getApplicationBooleanProperty(java.lang.String) -> getApplicationBooleanProperty
    boolean getApplicationBooleanProperty(java.lang.String,boolean) -> getApplicationBooleanProperty
    void setApplicationProperty(java.lang.String,java.lang.String) -> setApplicationProperty
    void setApplicationProperties(java.util.Map) -> setApplicationProperties
    void deleteApplicationProperty(java.lang.String) -> deleteApplicationProperty
    java.util.List getLocalizedPropertyLocales(java.lang.String) -> getLocalizedPropertyLocales
    void setLocalizedApplicationProperty(java.lang.String,java.lang.String,java.util.Locale) -> setLocalizedApplicationProperty
    void deleteLocalizedApplicationProperty(java.lang.String,java.util.Locale) -> deleteLocalizedApplicationProperty
architecture.common.lifecycle.ApplicationPropertyChangeEvent -> architecture.common.lifecycle.ApplicationPropertyChangeEvent:
    architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type eventType -> a
    34:34:architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type getEventType() -> getEventType
architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type -> architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type:
    architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type ADDED -> ADDED
    architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type REMOVED -> REMOVED
    architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type MODIFIED -> MODIFIED
    architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type[] $VALUES -> a
    20:20:architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type[] values() -> values
    20:20:architecture.common.lifecycle.ApplicationPropertyChangeEvent$Type valueOf(java.lang.String) -> valueOf
architecture.common.lifecycle.ApplicationStateChangeEvent -> architecture.common.lifecycle.ApplicationStateChangeEvent:
architecture.common.lifecycle.Component -> architecture.common.lifecycle.Component:
    java.lang.String getName() -> getName
    architecture.common.lifecycle.State getState() -> getState
    void initialize() -> initialize
    void start() -> start
    void stop() -> stop
    void destroy() -> destroy
    void removeStateChangeListener(java.lang.Object) -> removeStateChangeListener
    void addStateChangeListener(java.lang.Object) -> addStateChangeListener
architecture.common.lifecycle.ComponentImpl -> architecture.common.lifecycle.ComponentImpl:
    java.lang.String name -> name
    architecture.common.lifecycle.State state -> state
    architecture.common.event.api.EventPublisher eventPublisher -> a
    org.apache.commons.logging.Log log -> log
    48:48:java.lang.String getName() -> getName
    53:54:void setName(java.lang.String) -> setName
    58:58:architecture.common.lifecycle.State getState() -> getState
    63:63:java.lang.String getStateString() -> getStateString
    67:70:void destroy() -> destroy
    73:76:void initialize() -> initialize
    79:84:void start() -> start
    87:92:void stop() -> stop
    96:99:void setState(architecture.common.lifecycle.State) -> setState
    101:101:void startInternal() -> startInternal
    103:103:void stopInternal() -> stopInternal
    105:105:void destoryInternal() -> destoryInternal
    107:107:void initializeInternal() -> initializeInternal
    110:113:void fireStateChangeEvent(architecture.common.lifecycle.State,architecture.common.lifecycle.State) -> fireStateChangeEvent
    116:116:architecture.common.event.api.EventPublisher getEventPublisher() -> getEventPublisher
    123:124:void setEventPublisher(architecture.common.event.api.EventPublisher) -> setEventPublisher
    127:129:void removeStateChangeListener(java.lang.Object) -> removeStateChangeListener
    132:134:void addStateChangeListener(java.lang.Object) -> addStateChangeListener
    138:138:java.lang.String toString() -> toString
architecture.common.lifecycle.ConfigRoot -> architecture.common.lifecycle.ConfigRoot:
    int NODE -> NODE
    java.lang.String getConfigRootPath() -> getConfigRootPath
    java.lang.String getURI(java.lang.String) -> getURI
    java.io.File getFile(java.lang.String) -> getFile
architecture.common.lifecycle.ConfigRootHelper -> architecture.common.lifecycle.ConfigRootHelper:
    java.lang.String getRootURI() -> getRootURI
    java.lang.String getEffectiveRootPath() -> getEffectiveRootPath
    architecture.common.lifecycle.ConfigRoot getConfigRoot() -> getConfigRoot
    void setServletContext(javax.servlet.ServletContext) -> setServletContext
architecture.common.lifecycle.Container -> architecture.common.lifecycle.Container:
    void autowireComponent(java.lang.Object) -> autowireComponent
    java.lang.Object createComponent(java.lang.Class) -> createComponent
    java.lang.Object getComponent(java.lang.Object) -> getComponent
    java.lang.Object getComponent(java.lang.Class) -> getComponent
    java.lang.Object getInstance(java.lang.Object) -> getInstance
    void refresh() -> refresh
architecture.common.lifecycle.Event -> architecture.common.lifecycle.Event:
    java.util.UUID uuid -> a
    java.lang.Object actor -> a
    java.util.Date createdDate -> a
    37:37:java.util.Date getDate() -> getDate
    41:41:java.lang.Object getActor() -> getActor
    45:46:void setActor(java.lang.Object) -> setActor
    50:51:void setDate(java.util.Date) -> setDate
    55:55:java.util.UUID getUuid() -> getUuid
    60:60:java.lang.String toString() -> toString
architecture.common.lifecycle.PropertyChangeEvent -> architecture.common.lifecycle.PropertyChangeEvent:
    java.lang.String propertyName -> a
    java.lang.Object newValue -> a
    java.lang.Object oldValue -> b
    55:55:java.lang.String getPropertyName() -> getPropertyName
    65:65:java.lang.Object getNewValue() -> getNewValue
    75:75:java.lang.Object getOldValue() -> getOldValue
architecture.common.lifecycle.State -> architecture.common.lifecycle.State:
    architecture.common.lifecycle.State NONE -> NONE
    architecture.common.lifecycle.State INITIALIZING -> INITIALIZING
    architecture.common.lifecycle.State INITIALIZED -> INITIALIZED
    architecture.common.lifecycle.State STARTING -> STARTING
    architecture.common.lifecycle.State STARTED -> STARTED
    architecture.common.lifecycle.State STOPING -> STOPING
    architecture.common.lifecycle.State RUNNING -> RUNNING
    architecture.common.lifecycle.State STOPED -> STOPED
    architecture.common.lifecycle.State DESTROYING -> DESTROYING
    architecture.common.lifecycle.State DESTROYED -> DESTROYED
    java.lang.String desc -> a
    architecture.common.lifecycle.State[] $VALUES -> a
    18:18:architecture.common.lifecycle.State[] values() -> values
    18:18:architecture.common.lifecycle.State valueOf(java.lang.String) -> valueOf
    40:40:java.lang.String toString() -> toString
architecture.common.lifecycle.StateChangeEvent -> architecture.common.lifecycle.StateChangeEvent:
    architecture.common.lifecycle.State oldState -> a
    architecture.common.lifecycle.State newState -> b
    34:34:architecture.common.lifecycle.State getNewState() -> getNewState
    38:38:architecture.common.lifecycle.State getOldState() -> getOldState
architecture.common.lifecycle.Version -> architecture.common.lifecycle.Version:
    int major -> a
    int minor -> b
    int micro -> c
    int statusVersion -> d
    architecture.common.lifecycle.Version$ReleaseStatus status -> a
    java.lang.String versionString -> a
    80:80:java.lang.String getVersionString() -> getVersionString
    89:89:architecture.common.lifecycle.Version$ReleaseStatus getStatus() -> getStatus
    98:98:int getMajor() -> getMajor
    107:107:int getMinor() -> getMinor
    116:116:int getMicro() -> getMicro
    128:128:int getStatusVersion() -> getStatusVersion
architecture.common.lifecycle.Version$ReleaseStatus -> architecture.common.lifecycle.Version$ReleaseStatus:
    architecture.common.lifecycle.Version$ReleaseStatus Release -> Release
    architecture.common.lifecycle.Version$ReleaseStatus Release_Candidate -> Release_Candidate
    architecture.common.lifecycle.Version$ReleaseStatus Beta -> Beta
    architecture.common.lifecycle.Version$ReleaseStatus Alpha -> Alpha
    java.lang.String status -> a
    architecture.common.lifecycle.Version$ReleaseStatus[] $VALUES -> a
    135:135:architecture.common.lifecycle.Version$ReleaseStatus[] values() -> values
    135:135:architecture.common.lifecycle.Version$ReleaseStatus valueOf(java.lang.String) -> valueOf
    146:146:java.lang.String toString() -> toString
architecture.common.lifecycle.internal.AbstractApplicationProperties -> architecture.common.lifecycle.internal.AbstractApplicationProperties:
    org.apache.commons.logging.Log log -> log
    29:29:boolean getBooleanProperty(java.lang.String) -> getBooleanProperty
    33:37:boolean getBooleanProperty(java.lang.String,boolean) -> getBooleanProperty
    41:41:int getIntProperty(java.lang.String,int) -> getIntProperty
architecture.common.lifecycle.internal.EmptyApplicationProperties -> architecture.common.lifecycle.internal.EmptyApplicationProperties:
    37:37:architecture.common.lifecycle.internal.EmptyApplicationProperties getInstance() -> getInstance
    41:41:java.util.Collection getChildrenNames(java.lang.String) -> getChildrenNames
    45:45:java.util.Collection getPropertyNames() -> getPropertyNames
    49:49:void clear() -> clear
    52:52:boolean containsKey(java.lang.Object) -> containsKey
    56:56:boolean containsValue(java.lang.Object) -> containsValue
    60:60:java.util.Set entrySet() -> entrySet
    64:64:java.lang.String get(java.lang.Object) -> get
    68:68:java.util.Collection values() -> values
    73:73:java.util.Set keySet() -> keySet
    77:77:java.lang.String put(java.lang.String,java.lang.String) -> put
    81:81:void putAll(java.util.Map) -> putAll
    84:84:java.lang.String remove(java.lang.Object) -> remove
    88:88:int size() -> size
    92:92:boolean isEmpty() -> isEmpty
    24:24:java.lang.Object remove(java.lang.Object) -> remove
    24:24:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    24:24:java.lang.Object get(java.lang.Object) -> get
architecture.common.lifecycle.internal.EmptyApplicationProperties$InstanceHolder -> c:
    architecture.common.lifecycle.internal.EmptyApplicationProperties instance -> a
    26:26:architecture.common.lifecycle.internal.EmptyApplicationProperties access$100() -> a
architecture.common.lifecycle.internal.XmlApplicationProperties -> architecture.common.lifecycle.internal.XmlApplicationProperties:
    java.io.File file -> a
    org.dom4j.Document doc -> a
    java.util.Map propertyCache -> a
    java.util.concurrent.locks.Lock lock -> a
    201:208:java.util.Collection getPropertyNames() -> getPropertyNames
    212:212:void clear() -> clear
    216:216:boolean containsKey(java.lang.Object) -> containsKey
    220:220:boolean containsValue(java.lang.Object) -> containsValue
    224:224:java.util.Set entrySet() -> entrySet
    229:259:java.lang.String get(java.lang.Object) -> get
    266:283:java.util.Collection getChildrenNames(java.lang.String) -> getChildrenNames
    288:306:java.lang.String getAttribute(java.lang.String,java.lang.String) -> getAttribute
    310:310:boolean isEmpty() -> isEmpty
    314:314:java.util.Set keySet() -> keySet
    319:329:java.lang.String put(java.lang.String,java.lang.String) -> put
    333:347:void putAll(java.util.Map) -> putAll
    350:364:java.lang.String remove(java.lang.Object) -> remove
    368:368:int size() -> size
    372:372:java.util.Collection values() -> values
    377:379:void buildDoc(java.io.Reader) -> a
    388:398:void getElementNames(java.util.List,org.dom4j.Element,java.lang.String) -> a
    401:470:void saveProperties() -> a
    49:49:java.lang.Object remove(java.lang.Object) -> remove
    49:49:java.lang.Object put(java.lang.Object,java.lang.Object) -> put
    49:49:java.lang.Object get(java.lang.Object) -> get
architecture.common.plugin.BasicModule -> architecture.common.plugin.BasicModule:
    java.lang.String name -> a
    58:58:java.lang.String getName() -> getName
    70:70:void initialize(architecture.common.lifecycle.Application) -> initialize
    82:82:void start() -> start
    91:91:void stop() -> stop
    100:100:void destroy() -> destroy
architecture.common.plugin.CacheInfo -> architecture.common.plugin.CacheInfo:
    java.lang.String cacheName -> a
    architecture.common.plugin.CacheInfo$Type type -> a
    java.util.Map params -> a
    67:67:java.lang.String getCacheName() -> getCacheName
    71:71:architecture.common.plugin.CacheInfo$Type getType() -> getType
    90:90:java.util.Map getParams() -> getParams
architecture.common.plugin.CacheInfo$Type -> architecture.common.plugin.CacheInfo$Type:
    architecture.common.plugin.CacheInfo$Type replicated -> replicated
    architecture.common.plugin.CacheInfo$Type optimistic -> optimistic
    architecture.common.plugin.CacheInfo$Type distributed -> distributed
    java.lang.String name -> a
    architecture.common.plugin.CacheInfo$Type[] $VALUES -> a
    93:93:architecture.common.plugin.CacheInfo$Type[] values() -> values
    93:93:architecture.common.plugin.CacheInfo$Type valueOf(java.lang.String) -> valueOf
    128:131:architecture.common.plugin.CacheInfo$Type valueof(java.lang.String) -> valueof
    135:135:java.lang.String getName() -> getName
architecture.common.plugin.Module -> architecture.common.plugin.Module:
    java.lang.String getName() -> getName
    void initialize(architecture.common.lifecycle.Application) -> initialize
    void start() -> start
    void stop() -> stop
    void destroy() -> destroy
architecture.common.plugin.Plugin -> architecture.common.plugin.Plugin:
    void initialize(architecture.common.plugin.PluginManagerImpl,java.io.File) -> initialize
    void destory() -> destory
architecture.common.plugin.PluginCacheConfigurator -> architecture.common.plugin.PluginCacheConfigurator:
    org.apache.commons.logging.Log Log -> a
    java.io.InputStream configDataStream -> a
    architecture.common.plugin.PluginCacheRegistry cacheRegistry -> a
    72:73:void setPluginCacheRegistry(architecture.common.plugin.PluginCacheRegistry) -> setPluginCacheRegistry
    76:77:void setInputStream(java.io.InputStream) -> setInputStream
    81:92:void configure(java.lang.String) -> configure
    109:117:java.util.Map readInitParams(org.dom4j.Node) -> a
architecture.common.plugin.PluginCacheRegistry -> architecture.common.plugin.PluginCacheRegistry:
    void registerCache(java.lang.String,architecture.common.plugin.CacheInfo) -> registerCache
    void unregisterCaches(java.lang.String) -> unregisterCaches
    architecture.common.plugin.CacheInfo getCacheInfo(java.lang.String) -> getCacheInfo
architecture.common.plugin.PluginClassLoader -> architecture.common.plugin.PluginClassLoader:
    org.apache.commons.logging.Log Log -> a
    64:113:void addDirectory(java.io.File,boolean) -> addDirectory
    116:117:void addURLFile(java.net.URL) -> addURLFile
architecture.common.plugin.PluginClassLoader$1 -> architecture.common.plugin.PluginClassLoader$a:
    91:91:boolean accept(java.io.File,java.lang.String) -> accept
architecture.common.plugin.PluginDevEnvironment -> architecture.common.plugin.PluginDevEnvironment:
    java.io.File webRoot -> a
    java.io.File classesDir -> b
    42:42:java.io.File getWebRoot() -> getWebRoot
    50:51:void setWebRoot(java.io.File) -> setWebRoot
    58:58:java.io.File getClassesDir() -> getClassesDir
    66:67:void setClassesDir(java.io.File) -> setClassesDir
architecture.common.plugin.PluginListener -> architecture.common.plugin.PluginListener:
    void pluginCreated(java.lang.String,architecture.common.plugin.Plugin) -> pluginCreated
    void pluginDestroyed(java.lang.String,architecture.common.plugin.Plugin) -> pluginDestroyed
architecture.common.plugin.PluginManager -> architecture.common.plugin.PluginManager:
    boolean isInitialized() -> isInitialized
architecture.common.plugin.PluginManagerImpl -> architecture.common.plugin.PluginManagerImpl:
    org.apache.commons.logging.Log Log -> a
    java.io.File pluginDirectory -> a
    java.util.Map plugins -> a
    java.util.Map classloaders -> b
    java.util.Map pluginDirs -> c
    java.util.Map pluginFiles -> d
    java.util.concurrent.ScheduledExecutorService executor -> a
    java.util.Map pluginDevelopment -> e
    java.util.Map parentPluginMap -> f
    java.util.Map childPluginMap -> g
    java.util.Set devPlugins -> a
    architecture.common.plugin.PluginManagerImpl$PluginMonitor pluginMonitor -> a
    java.util.Set pluginListeners -> b
    java.util.Set pluginManagerListeners -> c
    java.util.concurrent.atomic.AtomicBoolean initialized -> initialized
    architecture.common.plugin.PluginCacheRegistry pluginCacheRegistry -> a
    106:107:void setPluginCacheRegistry(architecture.common.plugin.PluginCacheRegistry) -> setPluginCacheRegistry
    110:112:boolean isSetPluginDirectory() -> isSetPluginDirectory
    149:158:void initialize() -> initialize
    161:161:boolean isInitialized() -> isInitialized
    165:166:void setPluginDirectory(java.io.File) -> setPluginDirectory
    172:183:void start() -> start
    190:209:void shutdown() -> shutdown
    219:251:boolean installPlugin(java.io.InputStream,java.lang.String) -> installPlugin
    261:261:boolean isPluginDownloaded(java.lang.String) -> isPluginDownloaded
    270:270:java.util.Collection getPlugins() -> getPlugins
    282:282:architecture.common.plugin.Plugin getPlugin(java.lang.String) -> getPlugin
    292:292:java.io.File getPluginDirectory(architecture.common.plugin.Plugin) -> getPluginDirectory
    302:302:java.io.File getPluginFile(java.lang.String) -> getPluginFile
    316:316:boolean isExecuted() -> isExecuted
    609:612:void firePluginCreatedEvent(java.lang.String,architecture.common.plugin.Plugin) -> a
    615:618:void firePluginsMonitored() -> a
    633:739:void unloadPlugin(java.lang.String) -> unloadPlugin
    742:745:void firePluginDestroyedEvent(java.lang.String,architecture.common.plugin.Plugin) -> b
    759:760:java.lang.Class loadClass(architecture.common.plugin.Plugin,java.lang.String) -> loadClass
    772:772:architecture.common.plugin.PluginDevEnvironment getDevEnvironment(architecture.common.plugin.Plugin) -> getDevEnvironment
    784:790:java.lang.String getName(architecture.common.plugin.Plugin) -> getName
    802:803:java.lang.String getDescription(architecture.common.plugin.Plugin) -> getDescription
    814:814:java.lang.String getAuthor(architecture.common.plugin.Plugin) -> getAuthor
    825:825:java.lang.String getVersion(architecture.common.plugin.Plugin) -> getVersion
    836:836:java.lang.String getMinServerVersion(architecture.common.plugin.Plugin) -> getMinServerVersion
    848:848:java.lang.String getDatabaseKey(architecture.common.plugin.Plugin) -> getDatabaseKey
    860:869:int getDatabaseVersion(architecture.common.plugin.Plugin) -> getDatabaseVersion
    881:894:architecture.common.plugin.PluginManagerImpl$License getLicense(architecture.common.plugin.Plugin) -> getLicense
    904:904:architecture.common.plugin.PluginClassLoader getPluginClassloader(architecture.common.plugin.Plugin) -> getPluginClassloader
    916:935:java.lang.String getElementValue(architecture.common.plugin.Plugin,java.lang.String) -> a
    1247:1279:boolean deleteDir(java.io.File) -> a
    1283:1284:void addPluginListener(architecture.common.plugin.PluginListener) -> addPluginListener
    1287:1288:void removePluginListener(architecture.common.plugin.PluginListener) -> removePluginListener
    1291:1295:void addPluginManagerListener(architecture.common.plugin.PluginManagerListener) -> addPluginManagerListener
    1298:1299:void removePluginManagerListener(architecture.common.plugin.PluginManagerListener) -> removePluginManagerListener
    79:79:java.util.Set access$200(architecture.common.plugin.PluginManagerImpl) -> a
    79:79:void access$300(architecture.common.plugin.PluginManagerImpl,java.io.File) -> a
    79:79:java.io.File access$400(architecture.common.plugin.PluginManagerImpl) -> a
    79:79:java.util.Map access$500(architecture.common.plugin.PluginManagerImpl) -> a
    79:79:boolean access$600(architecture.common.plugin.PluginManagerImpl,java.io.File) -> a
    79:79:java.util.Map access$700(architecture.common.plugin.PluginManagerImpl) -> b
    79:79:void access$800(architecture.common.plugin.PluginManagerImpl) -> a
    79:79:org.apache.commons.logging.Log access$900() -> a
architecture.common.plugin.PluginManagerImpl$1 -> architecture.common.plugin.PluginManagerImpl$a:
    1253:1253:int compare(java.lang.Object,java.lang.Object) -> compare
architecture.common.plugin.PluginManagerImpl$License -> architecture.common.plugin.PluginManagerImpl$License:
    architecture.common.plugin.PluginManagerImpl$License commercial -> commercial
    architecture.common.plugin.PluginManagerImpl$License gpl -> gpl
    architecture.common.plugin.PluginManagerImpl$License apache -> apache
    architecture.common.plugin.PluginManagerImpl$License internal -> internal
    architecture.common.plugin.PluginManagerImpl$License other -> other
    architecture.common.plugin.PluginManagerImpl$License[] $VALUES -> a
    941:941:architecture.common.plugin.PluginManagerImpl$License[] values() -> values
    941:941:architecture.common.plugin.PluginManagerImpl$License valueOf(java.lang.String) -> valueOf
architecture.common.plugin.PluginManagerImpl$PluginMonitor -> architecture.common.plugin.PluginManagerImpl$b:
    boolean running -> a
    boolean firstRun -> b
    architecture.common.plugin.PluginManagerImpl this$0 -> a
    998:1136:void run() -> run
    1148:1187:void unzipPlugin(java.lang.String,java.io.File,java.io.File) -> a
    1198:1236:void unpackArchives(java.io.File) -> a
architecture.common.plugin.PluginManagerImpl$PluginMonitor$1 -> architecture.common.plugin.PluginManagerImpl$b$a:
    1021:1022:boolean accept(java.io.File) -> accept
architecture.common.plugin.PluginManagerImpl$PluginMonitor$2 -> architecture.common.plugin.PluginManagerImpl$b$b:
    1065:1065:boolean accept(java.io.File) -> accept
architecture.common.plugin.PluginManagerImpl$PluginMonitor$3 -> architecture.common.plugin.PluginManagerImpl$b$c:
    1071:1071:int compare(java.lang.Object,java.lang.Object) -> compare
architecture.common.plugin.PluginManagerImpl$PluginMonitor$4 -> architecture.common.plugin.PluginManagerImpl$b$d:
    1200:1200:boolean accept(java.io.File,java.lang.String) -> accept
architecture.common.plugin.PluginManagerListener -> architecture.common.plugin.PluginManagerListener:
    void pluginsMonitored() -> pluginsMonitored
architecture.common.plugin.internal.PluginCacheRegistryImpl -> architecture.common.plugin.internal.PluginCacheRegistryImpl:
    org.apache.commons.logging.Log Log -> a
    java.util.Map extraCacheMappings -> a
    java.util.Map pluginCaches -> b
    net.sf.ehcache.CacheManager cacheManager -> a
    51:71:void registerCache(java.lang.String,architecture.common.plugin.CacheInfo) -> registerCache
    79:93:void unregisterCaches(java.lang.String) -> unregisterCaches
    96:96:architecture.common.plugin.CacheInfo getCacheInfo(java.lang.String) -> getCacheInfo
    100:113:int getMaxSizeFromProperty(architecture.common.plugin.CacheInfo) -> a
architecture.common.scanner.AbstractDirectoryScanner -> architecture.common.scanner.AbstractDirectoryScanner:
    org.apache.commons.logging.Log log -> log
    int pollIntervalMillis -> a
    boolean scanEnabled -> a
    java.util.LinkedList listenerList -> a
    architecture.common.scanner.AbstractDirectoryScanner$ScannerThread scannerThread -> a
    31:34:void create() -> create
    38:44:void start() -> start
    50:52:void doStop() -> doStop
    56:64:void destroy() -> destroy
    67:69:boolean isStarted() -> isStarted
    81:82:void addDirectoryListener(architecture.common.scanner.DirectoryListener) -> addDirectoryListener
    85:86:void removeDirectoryListener(architecture.common.scanner.DirectoryListener) -> removeDirectoryListener
    93:95:architecture.common.scanner.DirectoryListener[] getDirectoryListeners() -> getDirectoryListeners
    100:100:int getPollIntervalMillis() -> getPollIntervalMillis
    104:105:void setPollIntervalMillis(int) -> setPollIntervalMillis
    108:109:void setScanEnabled(boolean) -> setScanEnabled
    112:112:boolean isScanEnabled() -> isScanEnabled
    void scan() -> scan
architecture.common.scanner.AbstractDirectoryScanner$ScannerThread -> architecture.common.scanner.AbstractDirectoryScanner$ScannerThread:
    org.apache.commons.logging.Log log -> log
    java.util.concurrent.atomic.AtomicBoolean enabled -> enabled
    java.util.concurrent.atomic.AtomicBoolean shuttingDown -> shuttingDown
    java.lang.Object lock -> lock
    architecture.common.scanner.AbstractDirectoryScanner this$0 -> a
    152:155:void setEnabled(boolean) -> setEnabled
    165:169:void shutdown() -> shutdown
    175:194:void run() -> run
    198:202:void doScan() -> doScan
    205:213:void loop() -> loop
architecture.common.scanner.DirectoryListener -> architecture.common.scanner.DirectoryListener:
    boolean isFileDeployed(java.io.File) -> isFileDeployed
    long getDeploymentTime(java.io.File) -> getDeploymentTime
    boolean validateFile(java.io.File) -> validateFile
    java.lang.String fileCreated(java.io.File) -> fileCreated
    boolean fileDeleted(java.io.File) -> fileDeleted
    void fileChanged(java.io.File) -> fileChanged
architecture.common.scanner.URLDirectoryScanner -> architecture.common.scanner.URLDirectoryScanner:
    boolean doRecursiveSearch -> doRecursiveSearch
    java.util.List urlList -> urlList
    java.util.Map files -> files
    31:39:void addScanDir(java.lang.String) -> addScanDir
    42:56:void addScanURL(java.net.URL) -> addScanURL
    59:62:void removeScanURL(java.net.URL) -> removeScanURL
    69:72:boolean hasScanURL(java.net.URL) -> hasScanURL
    77:78:void setRecursiveSearch(boolean) -> setRecursiveSearch
    81:81:boolean getRecursiveSearch() -> getRecursiveSearch
    87:199:void scan() -> scan
    207:212:void resolveFile(architecture.common.scanner.URLDirectoryScanner$FileAction) -> a
    222:239:long getLastModifiedInDir(java.io.File) -> a
architecture.common.scanner.URLDirectoryScanner$FileAction -> architecture.common.scanner.URLDirectoryScanner$b:
    int NEW_FILE -> a
    int UPDATED_FILE -> b
    int REMOVED_FILE -> c
    int action -> d
    java.io.File child -> a
    architecture.common.scanner.URLDirectoryScanner$FileInfo info -> a
    252:252:int access$000() -> a
    252:252:int access$100() -> b
    252:252:int access$200() -> c
    252:252:java.io.File access$300(architecture.common.scanner.URLDirectoryScanner$FileAction) -> a
    252:252:int access$400(architecture.common.scanner.URLDirectoryScanner$FileAction) -> a
    252:252:architecture.common.scanner.URLDirectoryScanner$FileInfo access$500(architecture.common.scanner.URLDirectoryScanner$FileAction) -> a
architecture.common.scanner.URLDirectoryScanner$FileInfo -> architecture.common.scanner.URLDirectoryScanner$a:
    long serialVersionUID -> serialVersionUID
    java.lang.String path -> a
    long size -> a
    long modified -> b
    boolean newFile -> a
    boolean changing -> b
architecture.common.util.ClassUtils -> architecture.common.util.ClassUtils:
    31:33:java.util.Set findAllTypes(java.lang.Class) -> findAllTypes
    45:60:void findAllTypes(java.lang.Class,java.util.Set) -> findAllTypes
architecture.common.util.ExtClassLoader -> architecture.common.util.ExtClassLoader:
    architecture.common.util.ExtClassLoader instance -> a
    architecture.common.util.ExtClassLoader$Gateway gateway -> a
    java.util.ArrayList containedPaths -> containedPaths
    java.util.ArrayList nativePaths -> nativePaths
    java.lang.String classpath -> a
    java.lang.String nativepath -> b
    31:37:architecture.common.util.ExtClassLoader getInstance() -> getInstance
    83:83:java.net.URL[] _getURLs() -> _getURLs
    88:146:void addNativePath(java.lang.String) -> addNativePath
    150:202:void addPath(java.lang.String) -> addPath
    212:218:void addURL(java.net.URL) -> addURL
    232:235:java.lang.Class findClass(java.lang.String) -> findClass
    242:249:java.lang.String findLibrary(java.lang.String) -> findLibrary
    256:271:java.lang.String findLibrary0(java.lang.String,java.util.ArrayList) -> findLibrary0
    276:279:java.net.URL findResource(java.lang.String) -> findResource
    293:302:java.util.Enumeration findResources(java.lang.String) -> findResources
    325:341:java.lang.String getClassPath() -> getClassPath
    345:360:java.lang.String getNativePath() -> getNativePath
    364:364:java.net.URL[] getURLs() -> getURLs
    368:374:void installGateway(architecture.common.util.ExtClassLoader$Gateway) -> installGateway
    417:417:java.lang.Class loadClass(java.lang.String,boolean) -> loadClass
architecture.common.util.ExtClassLoader$1 -> architecture.common.util.ExtClassLoader$a:
    int current -> a
    java.net.URL[] val$resources -> a
    java.util.Enumeration val$extensionResources -> a
    308:311:boolean hasMoreElements() -> hasMoreElements
    316:319:java.lang.Object nextElement() -> nextElement
architecture.common.util.ExtClassLoader$Gateway -> architecture.common.util.ExtClassLoader$Gateway:
    java.net.URL findResource(java.lang.String) -> findResource
    java.net.URL[] findResources(java.lang.String) -> findResources
    java.lang.Class loadClass(java.lang.String) -> loadClass
architecture.common.util.ImplFactory -> architecture.common.util.ImplFactory:
    java.util.Map _map -> a
    java.lang.String actualPlatformString -> a
    299:302:java.lang.Class loadClass(java.lang.String) -> a
    307:307:java.lang.Class loadClassFromKey(java.lang.Class) -> loadClassFromKey
    312:321:java.lang.Class loadClassFromKey(java.lang.String) -> loadClassFromKey
    326:328:java.lang.Object loadImplFromClass(java.lang.Class) -> loadImplFromClass
    334:337:java.lang.Object loadImplFromClass(java.lang.String) -> loadImplFromClass
    342:342:java.lang.Object loadImplFromKey(java.lang.Class) -> loadImplFromKey
    346:347:java.lang.Object loadImplFromKey(java.lang.String) -> loadImplFromKey
    352:379:java.util.List parseLegacyXmlFile(java.util.List) -> a
    52:52:java.lang.String access$002(java.lang.String) -> a
    52:52:java.lang.String access$000() -> a
architecture.common.util.ImplFactory$Factory -> b:
    java.lang.String interfaceName -> a
    java.lang.String implName -> b
    boolean isOverride -> a
    java.lang.String platforms -> c
    71:81:java.lang.String toString() -> toString
architecture.common.util.ImplFactory$FactoryList -> a:
    int rank -> a
    java.util.List factories -> a
    97:103:java.lang.String toString() -> toString
architecture.common.util.ImplFactory$ImplFactoryParsingHandler -> i:
    org.xml.sax.Locator locator -> a
    int rank -> a
    java.util.List factories -> a
    architecture.common.util.ImplFactory$Factory factory -> a
    java.lang.StringBuffer value -> a
    116:127:boolean validOn(java.lang.String) -> a
    147:148:void characters(char[],int,int) -> characters
    151:151:void endDocument() -> endDocument
    154:166:void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    170:171:void error(org.xml.sax.SAXParseException) -> error
    175:177:void fatalError(org.xml.sax.SAXParseException) -> fatalError
    181:181:java.util.List getFactories() -> a
    185:186:void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
    189:190:void startDocument() -> startDocument
    193:216:void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    220:221:void warning(org.xml.sax.SAXParseException) -> warning
architecture.common.util.ImplFactory$RankComparator -> e:
    225:225:int compare(java.lang.Object,java.lang.Object) -> compare
architecture.common.util.PlatformConstants -> architecture.common.util.PlatformConstants:
    java.lang.String FILE_SEP -> FILE_SEP
    java.lang.String EOL -> EOL
architecture.common.util.StringUtils -> architecture.common.util.StringUtils:
    java.util.regex.Pattern basicAddressPattern -> a
    java.util.regex.Pattern validUserPattern -> b
    java.util.regex.Pattern domainPattern -> c
    java.util.regex.Pattern ipDomainPattern -> d
    java.util.regex.Pattern tldPattern -> e
    60:91:boolean isValidEmailAddress(java.lang.String) -> isValidEmailAddress
    103:117:boolean verifyUrl(java.lang.String) -> verifyUrl
architecture.common.vfs.DefaultFileMonitor -> architecture.common.vfs.DefaultFileMonitor:
    org.apache.commons.logging.Log log -> a
    java.util.Map monitorMap -> a
    java.lang.Thread monitorThread -> a
    java.util.Stack deleteStack -> a
    java.util.Stack addStack -> b
    boolean shouldRun -> a
    boolean recursive -> b
    long delay -> a
    int checksPerRun -> a
    org.apache.commons.vfs.FileListener listener -> a
    129:129:boolean isRecursive() -> isRecursive
    137:138:void setRecursive(boolean) -> setRecursive
    146:146:org.apache.commons.vfs.FileListener getFileListener() -> a
    154:172:void addFile(org.apache.commons.vfs.FileObject) -> addFile
    179:210:void _addFile(org.apache.commons.vfs.FileObject) -> a
    218:245:void removeFile(org.apache.commons.vfs.FileObject) -> removeFile
    253:254:void queueRemoveFile(org.apache.commons.vfs.FileObject) -> queueRemoveFile
    261:261:long getDelay() -> getDelay
    269:277:void setDelay(long) -> setDelay
    284:284:int getChecksPerRun() -> getChecksPerRun
    295:296:void setChecksPerRun(int) -> setChecksPerRun
    303:304:void queueAddFile(org.apache.commons.vfs.FileObject) -> queueAddFile
    311:318:void start() -> start
    325:326:void stop() -> stop
    334:398:void run() -> run
    70:70:org.apache.commons.logging.Log access$300() -> a
architecture.common.vfs.DefaultFileMonitor$1 -> architecture.common.vfs.DefaultFileMonitor$1:
    org.apache.commons.vfs.FileObject file -> a
    architecture.common.vfs.DefaultFileMonitor fm -> a
    boolean exists -> a
    long timestamp -> a
    java.util.Map children -> a
    void resetChildrenList() -> a
    void refresh() -> c
    void fireAllCreate(org.apache.commons.vfs.FileObject) -> a
    void check() -> b
architecture.common.vfs.ExtendedFileMonitor -> architecture.common.vfs.ExtendedFileMonitor:
    org.apache.commons.logging.Log log -> a
    java.util.Map monitorMap -> a
    java.lang.Thread monitorThread -> a
    java.util.Stack deleteStack -> a
    java.util.Stack addStack -> b
    boolean shouldRun -> a
    boolean recursive -> b
    long delay -> a
    int checksPerRun -> a
    org.apache.commons.vfs.FileListener listener -> a
    160:160:java.util.Map getMonitorMap() -> getMonitorMap
    165:169:java.util.List getMonitoredFileObjectList() -> getMonitoredFileObjectList
    177:177:boolean isRecursive() -> isRecursive
    185:186:void setRecursive(boolean) -> setRecursive
    194:194:org.apache.commons.vfs.FileListener getFileListener() -> a
    202:220:void addFile(org.apache.commons.vfs.FileObject) -> addFile
    227:258:void _addFile(org.apache.commons.vfs.FileObject) -> a
    266:292:void removeFile(org.apache.commons.vfs.FileObject) -> removeFile
    300:301:void queueRemoveFile(org.apache.commons.vfs.FileObject) -> queueRemoveFile
    308:308:long getDelay() -> getDelay
    316:324:void setDelay(long) -> setDelay
    331:331:int getChecksPerRun() -> getChecksPerRun
    342:343:void setChecksPerRun(int) -> setChecksPerRun
    350:351:void queueAddFile(org.apache.commons.vfs.FileObject) -> queueAddFile
    358:365:void start() -> start
    372:373:void stop() -> stop
    381:445:void run() -> run
    104:104:org.apache.commons.logging.Log access$400() -> a
architecture.common.vfs.ExtendedFileMonitor$FileMonitorAgent -> g:
    org.apache.commons.vfs.FileObject file -> a
    architecture.common.vfs.ExtendedFileMonitor fm -> a
    boolean exists -> a
    long timestamp -> a
    java.util.Map children -> a
    491:505:void resetChildrenList() -> a
    515:521:void refresh() -> c
    532:566:void fireAllCreate(org.apache.commons.vfs.FileObject) -> a
    633:683:void check() -> b
architecture.common.vfs.VFSUtils -> architecture.common.vfs.VFSUtils:
    27:33:org.apache.commons.vfs.FileObject resolveFile(java.lang.String) -> resolveFile
